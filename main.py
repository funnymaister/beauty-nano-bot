import os
import io
import re
import time
import json
import base64
import logging
from datetime import datetime
from threading import Thread
from typing import Dict, Any, List

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, ConversationHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))
DEFAULT_FREE_LIMIT = int(os.getenv("FREE_LIMIT", "5"))
DEFAULT_PRICE_RUB = int(os.getenv("PRICE_RUB", "299"))

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY")

# ---------- –§–ê–ô–õ–´ –î–ê–ù–ù–´–• ----------
DATA_DIR = "./data"
os.makedirs(DATA_DIR, exist_ok=True)
ADMINS_FILE = os.path.join(DATA_DIR, "admins.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
USAGE_FILE = os.path.join(DATA_DIR, "usage.json")
CONFIG_FILE = os.path.join(DATA_DIR, "config.json")
FEEDBACK_FILE = os.path.join(DATA_DIR, "feedback.json")

# --- –ò—Å—Ç–æ—Ä–∏—è (–∏–Ω–¥–µ–∫—Å + —Ñ–∞–π–ª—ã) ---
HISTORY_FILE = os.path.join(DATA_DIR, "history.json")   # –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_DIR  = os.path.join(DATA_DIR, "history")        # –∫–∞—Ç–∞–ª–æ–≥ —Å jpg/txt
os.makedirs(HISTORY_DIR, exist_ok=True)

def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: str, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning("Can't save %s: %s", path, e)

# seed –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ENV
seed_admins = set()
if os.getenv("ADMIN_IDS"):
    try:
        seed_admins = set(int(x.strip()) for x in os.getenv("ADMIN_IDS").split(",") if x.strip().isdigit())
    except Exception:
        pass

ADMINS: set[int] = set(load_json(ADMINS_FILE, list(seed_admins)))
if not ADMINS and seed_admins:
    ADMINS = set(seed_admins)
save_json(ADMINS_FILE, list(ADMINS))

USERS: set[int] = set(load_json(USERS_FILE, []))
USAGE: Dict[int, Dict[str, Any]] = {int(k): v for k, v in load_json(USAGE_FILE, {}).items()}
CONFIG: Dict[str, Any] = load_json(CONFIG_FILE, {"FREE_LIMIT": DEFAULT_FREE_LIMIT, "PRICE_RUB": DEFAULT_PRICE_RUB})
FEEDBACK: Dict[str, int] = load_json(FEEDBACK_FILE, {"up": 0, "down": 0})

# –∏–Ω–¥–µ–∫—Å –∏—Å—Ç–æ—Ä–∏–∏: user_id(str) -> [{ts, mode, img, txt}]
HISTORY: Dict[str, List[Dict[str, Any]]] = load_json(HISTORY_FILE, {})
HISTORY_LIMIT = 10

def persist_all():
    save_json(ADMINS_FILE, list(ADMINS))
    save_json(USERS_FILE, list(USERS))
    save_json(USAGE_FILE, USAGE)
    save_json(CONFIG_FILE, CONFIG)
    save_json(FEEDBACK_FILE, FEEDBACK)
    save_json(HISTORY_FILE, HISTORY)

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
LAST_ANALYSIS_AT: Dict[int, float] = {}

# ---------- –†–ï–ñ–ò–ú–´ ----------
MODES = {"face": "–õ–∏—Ü–æ", "hair": "–í–æ–ª–æ—Å—ã", "both": "–õ–∏—Ü–æ+–í–æ–ª–æ—Å—ã"}
def get_mode(user_data: dict) -> str:
    return user_data.get("mode", "both")
def set_mode(user_data: dict, mode: str) -> None:
    if mode in MODES:
        user_data["mode"] = mode
def mode_keyboard(active: str) -> InlineKeyboardMarkup:
    def label(key):
        title = MODES[key]
        return f"‚úÖ {title}" if key == active else title
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(label("face"), callback_data="mode:face"),
         InlineKeyboardButton(label("hair"), callback_data="mode:hair")],
        [InlineKeyboardButton(label("both"), callback_data="mode:both")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

# ---------- –ü–†–û–§–ò–õ–¨ (Conversation) ----------
P_AGE, P_SKIN, P_HAIR, P_GOALS = range(4)
def get_profile(user_data: dict) -> Dict[str, Any]:
    return user_data.setdefault("profile", {})
def profile_to_text(pr: Dict[str, Any]) -> str:
    if not pr: return "–ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç."
    parts = []
    if pr.get("age"): parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {pr['age']}")
    if pr.get("skin"): parts.append(f"–ö–æ–∂–∞: {pr['skin']}")
    if pr.get("hair"): parts.append(f"–í–æ–ª–æ—Å—ã: {pr['hair']}")
    if pr.get("goals"): parts.append(f"–¶–µ–ª–∏: {pr['goals']}")
    return "\n".join(parts)

async def profile_start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ 5‚Äì100)")
    return P_AGE

async def profile_start_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ 5‚Äì100)")
    return P_AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = (update.message.text or "").strip()
    if not t.isdigit() or not (5 <= int(t) <= 100):
        return await update.message.reply_text("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º 5‚Äì100.")
    get_profile(context.user_data)["age"] = int(t)
    await update.message.reply_text("–û–ø–∏—à–∏ —Ç–∏–ø –∫–æ–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è/–∂–∏—Ä–Ω–∞—è/—Å—É—Ö–∞—è/–∫–æ–º–±–∏; —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è/–Ω–µ—Ç):")
    return P_SKIN

async def profile_skin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["skin"] = (update.message.text or "").strip()[:100]
    await update.message.reply_text("–ö–∞–∫–æ–π —Ç–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å? (–ø—Ä–∏–º–µ—Ä: —Ç–æ–Ω–∫–∏–µ, –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ, —Å–∫–ª–æ–Ω–Ω—ã –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏...)")
    return P_HAIR

async def profile_hair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["hair"] = (update.message.text or "").strip()[:120]
    await update.message.reply_text("–¢–≤–æ–∏ —Ü–µ–ª–∏/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è? (–ø—Ä–∏–º–µ—Ä: –º–µ–Ω—å—à–µ –±–ª–µ—Å–∫–∞, –æ–±—ä—ë–º, –º—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ...)")
    return P_GOALS

async def profile_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["goals"] = (update.message.text or "").strip()[:160]
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n" + profile_to_text(get_profile(context.user_data)))
    return ConversationHandler.END

async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è. /profile ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def myprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + profile_to_text(get_profile(context.user_data)))

# ---------- –•–ï–õ–ü–ï–†–´ –Æ–ó–ï–†–û–í/–õ–ò–ú–ò–¢–û–í ----------
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS
def ensure_user(user_id: int):
    if user_id not in USERS:
        USERS.add(user_id); persist_all()

def usage_entry(user_id: int) -> Dict[str, Any]:
    now = datetime.utcnow(); m = now.month
    u = USAGE.setdefault(user_id, {"count": 0, "month": m, "premium": False})
    if u.get("month") != m:
        u["count"] = 0; u["month"] = m
    return u

def check_usage(user_id: int) -> bool:
    u = usage_entry(user_id)
    if u.get("premium"): return True
    limit = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    if u["count"] < limit:
        u["count"] += 1; persist_all(); return True
    return False

def get_usage_text(user_id: int) -> str:
    u = usage_entry(user_id)
    if u.get("premium"): return "üåü –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤)."
    limit = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    left = max(0, limit - u["count"])
    return f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {left} –∏–∑ {limit}."

# ---------- –ò–°–¢–û–†–ò–Ø ----------
def _hist_user_dir(uid: int) -> str:
    p = os.path.join(HISTORY_DIR, str(uid))
    os.makedirs(p, exist_ok=True)
    return p

def save_history(uid: int, mode: str, jpeg_bytes: bytes, text: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º jpg + txt, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–Ω–¥–µ–∫—Å. –•—Ä–∞–Ω–∏–º –¥–æ HISTORY_LIMIT –∑–∞–ø–∏—Å–µ–π."""
    ts = int(time.time())
    udir = _hist_user_dir(uid)
    img_path = os.path.join(udir, f"{ts}.jpg")
    txt_path = os.path.join(udir, f"{ts}.txt")

    with open(img_path, "wb") as f:
        f.write(jpeg_bytes)
    with open(txt_path, "w", encoding="utf-8") as f:
        f.write(text)

    key = str(uid)
    items = HISTORY.get(key, [])
    items.append({"ts": ts, "mode": mode, "img": img_path, "txt": txt_path})
    items = sorted(items, key=lambda x: x["ts"], reverse=True)[:HISTORY_LIMIT]
    HISTORY[key] = items
    persist_all()

def list_history(uid: int) -> List[Dict[str, Any]]:
    return HISTORY.get(str(uid), [])

def history_keyboard(uid: int) -> InlineKeyboardMarkup:
    entries = list_history(uid)
    if not entries:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]])
    rows: List[List[InlineKeyboardButton]] = []
    for e in entries[:10]:
        dt = datetime.fromtimestamp(e["ts"]).strftime("%d.%m %H:%M")
        title = f"{dt} ‚Ä¢ {MODES.get(e.get('mode','both'),'')}"
        rows.append([InlineKeyboardButton(title, callback_data=f"hist:{e['ts']}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(rows)

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------
def action_keyboard(for_user_id: int, user_data: dict | None = None) -> InlineKeyboardMarkup:
    premium = usage_entry(for_user_id).get("premium", False)
    buttons = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu")],
        [InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
         InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
    ]
    if not premium:
        buttons.append([InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º", callback_data="premium")])
    else:
        buttons.append([InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞ (–ø—Ä–æ–¥–ª–∏—Ç—å)", callback_data="renew")])
    if for_user_id and is_admin(for_user_id):
        buttons.append([InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin")])
    return InlineKeyboardMarkup(buttons)

def admin_root_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data="admin:bonus"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")],
        [InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

def admin_users_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:add_admin"),
         InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:rem_admin")],
        [InlineKeyboardButton("üåü –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:grant_premium"),
         InlineKeyboardButton("üö´ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:revoke_premium")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã", callback_data="admin:add_free")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –ø–æ user_id", callback_data="admin:user_info")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

def admin_settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßÆ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç FREE", callback_data="admin:set_limit")],
        [InlineKeyboardButton("üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="admin:set_price")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

def admin_bonus_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåü –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:grant_premium")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã", callback_data="admin:add_free")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

# ---------- –ê–ù–ê–õ–ò–ó ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str, user_data: dict, user_id: int):
    ensure_user(user_id)
    if not check_usage(user_id):
        return await chat.send_message(
            "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n–û—Ñ–æ—Ä–º–∏ üåü –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )
    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO(); im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        f"–¢—ã –±—å—é—Ç–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –§–æ—Ç–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode}. –î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]
    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip() or "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π."
        if len(text) > 1800:
            text = text[:1800] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ.</i>"

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_history(user_id, mode, jpeg_bytes, text)

        try:
            await chat.send_message(text, parse_mode="HTML", reply_markup=action_keyboard(user_id, user_data))
        except BadRequest:
            safe = re.sub(r"<[^>]+>", "", text)
            await chat.send_message(safe, reply_markup=action_keyboard(user_id, user_data))

        await chat.send_message(get_usage_text(user_id))
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# ---------- –û–ë–©–ò–ï –•–≠–ù–î–õ–ï–†–´ ----------
async def send_home(chat, user_id: int, user_data: dict):
    await chat.send_message(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot üíá‚Äç‚ôÄÔ∏èü§ñ\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.",
        reply_markup=action_keyboard(user_id, user_data)
    )
    await chat.send_message(get_usage_text(user_id))

async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; ensure_user(uid)
    await send_home(update.effective_chat, uid, context.user_data)

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; ensure_user(uid)
    now = time.time()
    if now - LAST_ANALYSIS_AT.get(uid, 0) < RATE_LIMIT_SECONDS:
        return await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
    LAST_ANALYSIS_AT[uid] = now
    file = await update.message.photo[-1].get_file()
    buf = io.BytesIO(); await file.download_to_memory(out=buf)
    await _process_image_bytes(update.effective_chat, buf.getvalue(), get_mode(context.user_data), context.user_data, uid)

# ---------- –ö–û–õ–ë–≠–ö–ò (–∫–Ω–æ–ø–∫–∏) ----------
ADMIN_STATE: Dict[int, Dict[str, Any]] = {}

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "").strip()
    uid = update.effective_user.id; ensure_user(uid)

    # –î–æ–º–æ–π
    if data == "home":
        await q.answer()
        return await send_home(update.effective_chat, uid, context.user_data)

    # –†–µ–∂–∏–º—ã
    if data == "mode_menu":
        await q.answer()
        current = get_mode(context.user_data)
        return await q.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[current]}\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:", reply_markup=mode_keyboard(current)
        )
    if data.startswith("mode:"):
        await q.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")
        mode = data.split(":", 1)[1]
        set_mode(context.user_data, mode)
        return await q.message.reply_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MODES[mode]}\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=action_keyboard(uid, context.user_data)
        )

    # –ò—Å—Ç–æ—Ä–∏—è
    if data == "history":
        await q.answer()
        items = list_history(uid)
        if not items:
            return await q.message.reply_text(
                "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–ø–∞–¥—ë—Ç —Å—é–¥–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]])
            )
        return await q.message.reply_text("–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):", reply_markup=history_keyboard(uid))

    if data.startswith("hist:"):
        await q.answer()
        ts_str = data.split(":", 1)[1]
        rec = next((r for r in list_history(uid) if str(r["ts"]) == ts_str), None)
        if not rec:
            return await q.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=history_keyboard(uid))
        try:
            with open(rec["txt"], "r", encoding="utf-8") as f:
                txt = f.read()
        except Exception:
            txt = "(–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç)"
        caption = txt[:1024] if txt else f"–†–µ–∂–∏–º: {MODES.get(rec.get('mode','both'),'')}"
        try:
            with open(rec["img"], "rb") as ph:
                await q.message.reply_photo(photo=ph, caption=caption)
        except Exception:
            await q.message.reply_text(caption)
        return await q.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∑–∞–ø–∏—Å—å:", reply_markup=history_keyboard(uid))

    # –õ–∏–º–∏—Ç—ã/–ø—Ä–µ–º–∏—É–º/—Ñ–∏–¥–±–µ–∫
    if data == "limits":
        await q.answer()
        return await q.message.reply_text(get_usage_text(uid))

    if data == "premium":
        await q.answer()
        price = int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB))
        return await q.message.reply_text(
            "üåü <b>–ü—Ä–µ–º–∏—É–º</b>\n\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—Å–∫–æ—Ä–æ)\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Å–∫–æ—Ä–æ)\n\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ / –º–µ—Å—è—Ü",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy")],
                                               [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]])
        )
    if data == "buy":
        u = usage_entry(uid); u["premium"] = True; persist_all()
        await q.answer()
        return await q.message.reply_text("‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=action_keyboard(uid, context.user_data))
    if data == "renew":
        u = usage_entry(uid); u["premium"] = True; persist_all()
        await q.answer("–ü—Ä–æ–¥–ª–µ–Ω–æ")
        return await q.message.edit_text("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω ‚úÖ", reply_markup=action_keyboard(uid, context.user_data))

    if data == "fb:up":
        FEEDBACK["up"] = FEEDBACK.get("up", 0) + 1; persist_all()
        return await q.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=False)
    if data == "fb:down":
        FEEDBACK["down"] = FEEDBACK.get("down", 0) + 1; persist_all()
        return await q.answer("–ü—Ä–∏–Ω—è—Ç–æ üëç", show_alert=False)

    # –ê–¥–º–∏–Ω–∫–∞
    if data == "admin":
        if not is_admin(uid):
            return await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        return await q.message.reply_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_root_kb())

    if data.startswith("admin:"):
        if not is_admin(uid):
            return await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        cmd = data.split(":", 1)[1]
        if cmd == "users":
            return await q.message.reply_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", reply_markup=admin_users_kb())
        if cmd == "stats":
            total_users = len(USERS)
            premium_users = sum(1 for u in USAGE.values() if u.get("premium"))
            this_month = datetime.utcnow().month
            total_analyses = sum(usage_entry(uid2)["count"] for uid2 in USERS if usage_entry(uid2)["month"] == this_month)
            fb_up = FEEDBACK.get("up", 0); fb_down = FEEDBACK.get("down", 0)
            txt = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}\n"
                   f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ (—ç—Ç–æ—Ç –º–µ—Å—è—Ü): {total_analyses}\n‚Ä¢ –§–∏–¥–±–µ–∫ üëç/üëé: {fb_up}/{fb_down}\n"
                   f"‚Ä¢ FREE_LIMIT: {CONFIG.get('FREE_LIMIT')} ‚Ä¢ PRICE: {CONFIG.get('PRICE_RUB')} ‚ÇΩ")
            return await q.message.reply_text(txt, reply_markup=admin_root_kb())
        if cmd == "bonus":
            return await q.message.reply_text("üéÅ –ë–æ–Ω—É—Å—ã/–ü–æ–¥–∞—Ä–∫–∏", reply_markup=admin_bonus_kb())
        if cmd == "settings":
            return await q.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=admin_settings_kb())
        if cmd == "broadcast":
            ADMIN_STATE[uid] = {"mode": "broadcast"}
            return await q.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")
        if cmd in ("add_admin", "rem_admin", "grant_premium", "revoke_premium", "add_free", "user_info"):
            ADMIN_STATE[uid] = {"mode": cmd}
            prompts = {
                "add_admin": "–û—Ç–ø—Ä–∞–≤—å user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
                "rem_admin": "–û—Ç–ø—Ä–∞–≤—å user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è.",
                "grant_premium": "–û—Ç–ø—Ä–∞–≤—å user_id, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ü—Ä–µ–º–∏—É–º.",
                "revoke_premium": "–û—Ç–ø—Ä–∞–≤—å user_id, —É –∫–æ–≥–æ —Å–Ω—è—Ç—å –ü—Ä–µ–º–∏—É–º.",
                "add_free": "–§–æ—Ä–º–∞—Ç: user_id –ø—Ä–æ–±–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä: 123456 3).",
                "user_info": "–û—Ç–ø—Ä–∞–≤—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            }
            return await q.message.reply_text(prompts[cmd], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]]))
        if cmd == "set_limit":
            ADMIN_STATE[uid] = {"mode": "set_limit"}
            return await q.message.reply_text(f"–¢–µ–∫—É—â–∏–π FREE_LIMIT={CONFIG.get('FREE_LIMIT')}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
                                              reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]]))
        if cmd == "set_price":
            ADMIN_STATE[uid] = {"mode": "set_price"}
            return await q.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞={CONFIG.get('PRICE_RUB')} ‚ÇΩ. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ).",
                                              reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]]))

# ---------- –ê–î–ú–ò–ù –¢–ï–ö–°–¢–û–í–´–ï –†–ï–ñ–ò–ú–´ ----------
def extract_user_id_from_message(update: Update) -> int | None:
    if update.message and update.message.reply_to_message and update.message.reply_to_message.from_user:
        return update.message.reply_to_message.from_user.id
    if update.message and update.message.forward_from:
        return update.message.forward_from.id
    if update.message and update.message.text:
        parts = update.message.text.strip().split()
        if parts and parts[0].isdigit():
            return int(parts[0])
    return None

ADMIN_STATE: Dict[int, Dict[str, Any]] = {}

async def on_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if not is_admin(admin_id):
        return
    st = ADMIN_STATE.get(admin_id)
    if not st:
        return
    mode = st.get("mode")

    if mode == "broadcast":
        text = update.message.text or ""
        sent = 0; failed = 0
        for uid in list(USERS):
            try:
                await context.bot.send_message(uid, f"üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
                sent += 1
            except Forbidden:
                failed += 1
            except Exception:
                failed += 1
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}.", reply_markup=admin_root_kb())

    if mode in ("add_admin", "rem_admin", "grant_premium", "revoke_premium", "user_info"):
        target_id = extract_user_id_from_message(update)
        if not target_id:
            return await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å user_id.")
        ensure_user(target_id)
        if mode == "add_admin":
            ADMINS.add(target_id); persist_all()
            return await update.message.reply_text(f"‚úÖ {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.", reply_markup=admin_users_kb())
        if mode == "rem_admin":
            if target_id in ADMINS:
                ADMINS.remove(target_id); persist_all()
                return await update.message.reply_text(f"‚úÖ {target_id} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–æ–≤.", reply_markup=admin_users_kb())
            return await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.", reply_markup=admin_users_kb())
        if mode == "grant_premium":
            u = usage_entry(target_id); u["premium"] = True; persist_all()
            return await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–ª –ü—Ä–µ–º–∏—É–º {target_id}.", reply_markup=admin_users_kb())
        if mode == "revoke_premium":
            u = usage_entry(target_id); u["premium"] = False; persist_all()
            return await update.message.reply_text(f"‚úÖ –°–Ω—è–ª –ü—Ä–µ–º–∏—É–º —É {target_id}.", reply_markup=admin_users_kb())
        if mode == "user_info":
            u = usage_entry(target_id)
            txt = (f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}\n‚Ä¢ –ü—Ä–µ–º–∏—É–º: {'–¥–∞' if u.get('premium') else '–Ω–µ—Ç'}\n"
                   f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ (—ç—Ç–æ—Ç –º–µ—Å—è—Ü): {u.get('count', 0)} / –ª–∏–º–∏—Ç {CONFIG.get('FREE_LIMIT')}\n"
                   f"‚Ä¢ –ú–µ—Å—è—Ü –∑–∞–ø–∏—Å–∏: {u.get('month')}\n‚Ä¢ –ò–∑–≤–µ—Å—Ç–µ–Ω –±–æ—Ç—É: {'–¥–∞' if target_id in USERS else '–Ω–µ—Ç'}\n"
                   f"‚Ä¢ –ê–¥–º–∏–Ω: {'–¥–∞' if target_id in ADMINS else '–Ω–µ—Ç'}")
            return await update.message.reply_text(txt, reply_markup=admin_users_kb())

    if mode == "add_free":
        text = (update.message.text or "").strip()
        parts = text.split()
        if len(parts) < 2 or not parts[0].isdigit() or not parts[1].isdigit():
            return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä: 123456 3)")
        target_id = int(parts[0]); add_n = int(parts[1])
        ensure_user(target_id)
        u = usage_entry(target_id)
        u["count"] = max(0, u.get("count", 0) - add_n)
        persist_all()
        return await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–∏–ª {add_n} –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}. –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u['count']}.",
            reply_markup=admin_users_kb()
        )

    if mode == "set_limit":
        txt = (update.message.text or "").strip()
        if not txt.isdigit():
            return await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        CONFIG["FREE_LIMIT"] = int(txt); persist_all()
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"‚úÖ FREE_LIMIT –æ–±–Ω–æ–≤–ª—ë–Ω: {CONFIG['FREE_LIMIT']}", reply_markup=admin_settings_kb())

    if mode == "set_price":
        txt = (update.message.text or "").strip()
        if not txt.isdigit():
            return await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–ª—É—é —Ü–µ–Ω—É (‚ÇΩ).")
        CONFIG["PRICE_RUB"] = int(txt); persist_all()
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {CONFIG['PRICE_RUB']} ‚ÇΩ", reply_markup=admin_settings_kb())

# ---------- HEALTHZ ----------
def start_flask_healthz(port: int):
    app = Flask(__name__)
    @app.get("/healthz")
    def healthz(): return "ok", 200
    th = Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    th.daemon = True; th.start()

# ---------- MAIN ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ü—Ä–æ—Ñ–∏–ª—å: Conversation –∏ —Å—Ç–∞—Ä—Ç –ø–æ –∫–Ω–æ–ø–∫–µ/–∫–æ–º–∞–Ω–¥–µ
    profile_conv = ConversationHandler(
        entry_points=[CommandHandler("profile", profile_start_cmd),
                      CallbackQueryHandler(profile_start_cb, pattern="^profile$")],
        states={
            P_AGE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            P_SKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_skin)],
            P_HAIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_hair)],
            P_GOALS:[MessageHandler(filters.TEXT & ~filters.COMMAND, profile_goals)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
        name="profile_conv",
        persistent=False,
    )
    app.add_handler(profile_conv)

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))

    app.add_handler(CallbackQueryHandler(on_callback))

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–º)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_admin_text))

    # Healthz (–æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π –ø–∏–Ω–≥ –Ω–µ —É—Å—ã–ø–ª—è–ª —Å–µ—Ä–≤–∏—Å)
    start_flask_healthz(PORT)

    app.run_polling()

if __name__ == "__main__":
    main()
