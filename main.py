import os
import io
import re
import time
import base64
import logging
from datetime import datetime
from threading import Thread
from typing import Dict, Any

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, ChatMemberHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "5"))  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ –º–µ—Å—è—Ü

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY")

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
LAST_ANALYSIS_AT: Dict[int, float] = {}  # –∞–Ω—Ç–∏-—Å–ø–∞–º
USAGE: Dict[int, Dict[str, Any]] = {}    # {user_id: {"count": int, "month": int, "premium": bool}}

# ---------- –ú–û–î–´ –ò –ü–†–û–§–ò–õ–¨ ----------
MODES = {"face": "–õ–∏—Ü–æ", "hair": "–í–æ–ª–æ—Å—ã", "both": "–õ–∏—Ü–æ+–í–æ–ª–æ—Å—ã"}

def get_mode(user_data: dict) -> str:
    return user_data.get("mode", "both")

def set_mode(user_data: dict, mode: str) -> None:
    if mode in MODES:
        user_data["mode"] = mode

def get_profile(user_data: dict) -> Dict[str, Any]:
    return user_data.setdefault("profile", {})  # {"age","skin","hair","goals"}

def profile_to_text(pr: Dict[str, Any]) -> str:
    if not pr:
        return "–ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ù–∞–∂–º–∏ ¬´üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å."
    parts = []
    if pr.get("age"): parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {pr['age']}")
    if pr.get("skin"): parts.append(f"–ö–æ–∂–∞: {pr['skin']}")
    if pr.get("hair"): parts.append(f"–í–æ–ª–æ—Å—ã: {pr['hair']}")
    if pr.get("goals"): parts.append(f"–¶–µ–ª–∏: {pr['goals']}")
    return ";\n".join(parts)

def mode_keyboard(active: str) -> InlineKeyboardMarkup:
    def label(key):
        title = MODES[key]
        return f"‚úÖ {title}" if key == active else title
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(label("face"), callback_data="mode:face"),
         InlineKeyboardButton(label("hair"), callback_data="mode:hair")],
        [InlineKeyboardButton(label("both"), callback_data="mode:both")],
    ])

def action_keyboard(premium: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu")],
        [InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
         InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
    ]
    if not premium:
        buttons.append([InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º", callback_data="premium")])
    else:
        buttons.append([InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞ (–ø—Ä–æ–¥–ª–∏—Ç—å)", callback_data="renew")])
    return InlineKeyboardMarkup(buttons)

def hello_text() -> str:
    return (
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot (Gemini).\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ –§–æ—Ç–æ, –Ω–µ –∫–∞–∫ –§–∞–π–ª)."
    )

# ---------- –õ–ò–ú–ò–¢–´ ----------
def check_usage(user_id: int) -> bool:
    now = datetime.utcnow()
    month = now.month
    u = USAGE.setdefault(user_id, {"count": 0, "month": month, "premium": False})
    if u["month"] != month:
        u["count"] = 0
        u["month"] = month
    if u.get("premium"):
        return True
    if u["count"] < FREE_LIMIT:
        u["count"] += 1
        return True
    return False

def get_usage_text(user_id: int) -> str:
    u = USAGE.get(user_id, {"count": 0, "month": datetime.utcnow().month, "premium": False})
    if u.get("premium"):
        return "üåü –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤)."
    left = max(0, FREE_LIMIT - u["count"])
    return f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {left} –∏–∑ {FREE_LIMIT}."

# ---------- –ü–†–û–ú–ü–¢ ----------
def build_prompt(mode: str, profile: Dict[str, Any]) -> str:
    prof_lines = []
    if profile.get("age"): prof_lines.append(f"–≤–æ–∑—Ä–∞—Å—Ç: {profile['age']}")
    if profile.get("skin"): prof_lines.append(f"–∫–æ–∂–∞: {profile['skin']}")
    if profile.get("hair"): prof_lines.append(f"–≤–æ–ª–æ—Å—ã: {profile['hair']}")
    if profile.get("goals"): prof_lines.append(f"—Ü–µ–ª–∏: {profile['goals']}")
    prof_text = "; ".join(prof_lines)

    profile_hint = (
        f"–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({prof_text}). "
        "–ï—Å–ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º ‚Äî –æ—Ç–º–µ—Ç—å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ."
        if prof_text else
        "–ï—Å–ª–∏ —Å–º–æ–∂–µ—à—å ‚Äî —É—Ç–æ—á–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è."
    )

    common = (
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –†–£–°–°–ö–û–ú. –¢—ã ‚Äî –±–µ—Ä–µ–∂–Ω—ã–π –±—å—é—Ç–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –ù–ï–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, "
        "–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –ª–µ—á–µ–Ω–∏—è. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –ø—É–Ω–∫—Ç–∞–º–∏ —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
        "–í –∫–æ–Ω—Ü–µ ‚Äî –æ–¥–∏–Ω –æ–±—â–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
    )

    if mode == "face":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –õ–ò–¶–û. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üß¥ <b>–¢–∏–ø –∫–æ–∂–∏</b>\n"
            "üåû <b>–£—Ç—Ä–æ</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üåô <b>–í–µ—á–µ—Ä</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    elif mode == "hair":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –í–û–õ–û–°–´. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üíá <b>–¢–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ</b>\n"
            "üßº <b>–ú—ã—Ç—å—ë –∏ —É—Ö–æ–¥</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–£–∫–ª–∞–¥–∫–∞ –∏ —Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    else:
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –õ–ò–¶–û –ò –í–û–õ–û–°–´. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üß¥ <b>–ö–æ–∂–∞</b>\n"
            "üíá <b>–í–æ–ª–æ—Å—ã</b>\n"
            "üåû <b>–£—Ç—Ä–æ (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üåô <b>–í–µ—á–µ—Ä (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–í–æ–ª–æ—Å—ã: —É—Ö–æ–¥/—É–∫–ª–∞–¥–∫–∞/—Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    return f"{common}\n{profile_hint}\n\n–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ HTML.\n\n{specific}"

# ---------- HEALTHZ ----------
def start_flask_healthz(port: int):
    app = Flask(__name__)
    @app.get("/healthz")
    def healthz(): return "ok", 200
    th = Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    th.daemon = True
    th.start()
    log.info("Flask /healthz running on port %s", port)

# ---------- UI/–ù–ê–í–ò–ì–ê–¶–ò–Ø ----------
async def send_home(chat, user_data):
    current = get_mode(user_data)
    await chat.send_message(hello_text(), reply_markup=mode_keyboard(current))

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str, user_data: dict, user_id: int):
    # –ª–∏–º–∏—Ç—ã
    if not check_usage(user_id):
        return await chat.send_message(
            "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n–û—Ñ–æ—Ä–º–∏ üåü –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO()
        im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        build_prompt(mode, get_profile(user_data)),
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]

    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip()
        if not text:
            text = "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–±–æ–π."
        if len(text) > 1800:
            text = text[:1800] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ.</i>"

        premium = USAGE.get(user_id, {}).get("premium", False)
        try:
            await chat.send_message(
                text, parse_mode="HTML", reply_markup=action_keyboard(premium), disable_web_page_preview=True
            )
        except BadRequest:
            safe = re.sub(r"(?i)<\s*br\s*/?>", "\n", text)
            safe = re.sub(r"(?i)</?(p|div|ul|ol|li|h[1-6])[^>]*>", "\n", safe)
            safe = re.sub(r"<[^>]+>", "", safe)
            safe = re.sub(r"\n{3,}", "\n\n", safe).strip()
            await chat.send_message(safe, reply_markup=action_keyboard(premium), disable_web_page_preview=True)

        await chat.send_message(get_usage_text(user_id))
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# ---------- –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î –ò –¢–ï–ö–°–¢–ê ----------
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["welcomed"] = True
    await send_home(update.effective_chat, context.user_data)
    await update.message.reply_text(get_usage_text(update.effective_user.id))

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –∏–¥—ë—Ç –º–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è
    stage = context.user_data.get("ps")  # "age"|"skin"|"hair"|"goals"
    if stage:
        txt = (update.message.text or "").strip()
        prof = get_profile(context.user_data)
        if stage == "age":
            if not txt.isdigit() or not (5 <= int(txt) <= 100):
                return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 5 –¥–æ 100.")
            prof["age"] = int(txt)
            context.user_data["ps"] = "skin"
            return await update.message.reply_text("–û–ø–∏—à–∏ —Ç–∏–ø –∫–æ–∂–∏ (–Ω–∞–ø—Ä.: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è/–∂–∏—Ä–Ω–∞—è/—Å—É—Ö–∞—è/–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è/–Ω–µ—Ç):")
        if stage == "skin":
            prof["skin"] = txt[:100]
            context.user_data["ps"] = "hair"
            return await update.message.reply_text("–ö–∞–∫–æ–π —Ç–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å? (–Ω–∞–ø—Ä.: —Ç–æ–Ω–∫–∏–µ, –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ, —Å–∫–ª–æ–Ω–Ω—ã –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏...)")
        if stage == "hair":
            prof["hair"] = txt[:120]
            context.user_data["ps"] = "goals"
            return await update.message.reply_text("–ö–∞–∫–∏–µ —Ü–µ–ª–∏/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è? (–Ω–∞–ø—Ä.: –º–µ–Ω—å—à–µ –±–ª–µ—Å–∫–∞, –æ–±—ä—ë–º, –±–µ–∑ —Å—É–ª—å—Ñ–∞—Ç–æ–≤)")
        if stage == "goals":
            prof["goals"] = txt[:160]
            context.user_data["ps"] = None
            return await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + profile_to_text(prof))

    # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç: –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    current = get_mode(context.user_data)
    await update.message.reply_text(
        "–Ø –∂–¥—É —Ñ–æ—Ç–æ üôÇ\n–ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º: /start ‚Üí –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é ¬´‚öôÔ∏è –†–µ–∂–∏–º¬ª",
        reply_markup=mode_keyboard(current)
    )

# ---------- CALLBACK-–ö–ù–û–ü–ö–ò ----------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "").strip()
    user_id = update.effective_user.id
    u = USAGE.setdefault(user_id, {"count": 0, "month": datetime.utcnow().month, "premium": False})

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if data == "home":
        await q.answer()
        return await send_home(update.effective_chat, context.user_data)

    if data == "mode_menu":
        await q.answer()
        current = get_mode(context.user_data)
        return await q.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[current]}\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:",
            reply_markup=mode_keyboard(current)
        )

    if data.startswith("mode:"):
        await q.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")
        mode = data.split(":", 1)[1]
        set_mode(context.user_data, mode)
        return await q.message.edit_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MODES[mode]}\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.",
            reply_markup=mode_keyboard(mode)
        )

    if data == "profile":
        await q.answer()
        context.user_data["ps"] = "age"
        return await q.message.reply_text(
            "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å ‚ú®\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25)\n\n–ù–∞–ø–∏—à–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
        )

    # –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
    if data == "limits":
        await q.answer()
        return await q.message.reply_text(get_usage_text(user_id))

    if data == "premium":
        await q.answer()
        return await q.message.reply_text(
            "üåü <b>–ü—Ä–µ–º–∏—É–º</b>\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—Å–∫–æ—Ä–æ)\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Å–∫–æ—Ä–æ)\n\n"
            "–¶–µ–Ω–∞: 299 ‚ÇΩ / –º–µ—Å—è—Ü\n",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )

    if data == "buy":
        u["premium"] = True
        await q.answer()
        return await q.message.reply_text(
            "‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç.",
            reply_markup=action_keyboard(True)
        )

    if data == "renew":
        u["premium"] = True
        await q.answer("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω")
        return await q.message.edit_text("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω ‚úÖ", reply_markup=action_keyboard(True))

    # –§–∏–¥–±–µ–∫
    if data in ("fb:up", "fb:down"):
        await q.answer("–°–ø–∞—Å–∏–±–æ!" if data == "fb:up" else "–ü—Ä–∏–Ω—è—Ç–æ üëç")
        log.info("Feedback %s: %s", user_id, data)
        return

# ---------- –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ----------
async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    now = time.time()
    last = LAST_ANALYSIS_AT.get(user_id, 0)
    if now - last < RATE_LIMIT_SECONDS:
        return await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
    LAST_ANALYSIS_AT[user_id] = now

    # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file = await update.message.photo[-1].get_file()
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    await _process_image_bytes(
        update.effective_chat, buf.getvalue(), get_mode(context.user_data), context.user_data, user_id
    )

# ---------- –ê–í–¢–û–ü–†–ò–í–ï–¢ ----------
async def on_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.my_chat_member.new_chat_member.status == "member":
        context.user_data["welcomed"] = True
        await send_home(update.effective_chat, context.user_data)

# ---------- –û–®–ò–ë–ö–ò ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Dispatcher error: %s", context.error)

# ---------- MAIN ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(ChatMemberHandler(on_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_error_handler(on_error)

    start_flask_healthz(PORT)
    logging.warning("Force POLLING mode (/healthz –∞–∫—Ç–∏–≤–µ–Ω)")
    app.run_polling()

if __name__ == "__main__":
    main()
