import os
import io
import re
import time
import base64
import logging
from datetime import datetime
from threading import Thread
from typing import Dict, Any

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "5"))  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ –º–µ—Å—è—Ü

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY")

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
LAST_ANALYSIS_AT: Dict[int, float] = {}
USAGE: Dict[int, Dict[str, Any]] = {}  # user_id -> {"count": int, "month": int, "premium": bool}

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def check_usage(user_id: int) -> bool:
    now = datetime.utcnow()
    month = now.month
    u = USAGE.setdefault(user_id, {"count": 0, "month": month, "premium": False})

    # –Ω–æ–≤—ã–π –º–µ—Å—è—Ü ‚Üí —Å–±—Ä–æ—Å
    if u["month"] != month:
        u["count"] = 0
        u["month"] = month

    if u.get("premium"):
        return True
    if u["count"] < FREE_LIMIT:
        u["count"] += 1
        return True
    return False

def get_usage_text(user_id: int) -> str:
    u = USAGE.get(user_id, {"count": 0, "month": datetime.utcnow().month, "premium": False})
    if u.get("premium"):
        return "üåü –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤)."
    left = max(0, FREE_LIMIT - u["count"])
    return f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {left} –∏–∑ {FREE_LIMIT}."

# ---------- –ö–õ–ê–í–´ ----------
def action_keyboard(premium: bool = False) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu")],
        [InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
         InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
    ]
    if not premium:
        buttons.append([InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º", callback_data="premium")])
    else:
        buttons.append([InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞ (–ø—Ä–æ–¥–ª–∏—Ç—å)", callback_data="renew")])
    return InlineKeyboardMarkup(buttons)

# ---------- –ê–ù–ê–õ–ò–ó ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str, user_data: dict, user_id: int):
    if not check_usage(user_id):
        return await chat.send_message(
            "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
            "–û—Ñ–æ—Ä–º–∏ üåü –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )

    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO()
        im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        f"–¢—ã –±—å—é—Ç–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode}. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]

    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip()
        if not text:
            text = "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–±–æ–π."
        if len(text) > 1800:
            text = text[:1800] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ.</i>"

        u = USAGE.get(user_id, {})
        try:
            await chat.send_message(
                text, parse_mode="HTML", reply_markup=action_keyboard(u.get("premium", False))
            )
        except BadRequest:
            safe = re.sub(r"<[^>]+>", "", text)
            await chat.send_message(
                safe, reply_markup=action_keyboard(u.get("premium", False))
            )

        await chat.send_message(get_usage_text(user_id))
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    u = USAGE.get(user_id, {"premium": False})
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot üíá‚Äç‚ôÄÔ∏èü§ñ\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –∏ –≤–æ–ª–æ—Å –∏ –¥–∞—é —Å–æ–≤–µ—Ç—ã.\n\n"
        "–£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\n"
        "–•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç? –ñ–º–∏ üåü –ü—Ä–µ–º–∏—É–º.",
        reply_markup=action_keyboard(u.get("premium", False))
    )
    await update.message.reply_text(get_usage_text(user_id))

# ---------- CALLBACK ----------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    user_id = update.effective_user.id
    u = USAGE.setdefault(user_id, {"count": 0, "month": datetime.utcnow().month, "premium": False})

    if data == "limits":
        await q.answer()
        return await q.message.reply_text(get_usage_text(user_id))

    if data == "premium":
        await q.answer()
        return await q.message.reply_text(
            "üåü <b>–ü—Ä–µ–º–∏—É–º</b>\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—Å–∫–æ—Ä–æ)\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Å–∫–æ—Ä–æ)\n\n"
            "–¶–µ–Ω–∞: 299 ‚ÇΩ / –º–µ—Å—è—Ü\n",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )

    if data == "buy":
        u["premium"] = True
        await q.answer()
        return await q.message.reply_text(
            "‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç.",
            reply_markup=action_keyboard(True)
        )

    if data == "renew":
        u["premium"] = True
        await q.answer("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω")
        return await q.message.edit_text(
            "–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω ‚úÖ", reply_markup=action_keyboard(True)
        )

    if data in ("fb:up", "fb:down"):
        await q.answer("–°–ø–∞—Å–∏–±–æ!" if data == "fb:up" else "–ü—Ä–∏–Ω—è—Ç–æ üëç")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ----------
async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    now = time.time()
    last = LAST_ANALYSIS_AT.get(user_id, 0)
    if now - last < RATE_LIMIT_SECONDS:
        return await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
    LAST_ANALYSIS_AT[user_id] = now

    file = await update.message.photo[-1].get_file()
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    await _process_image_bytes(update.effective_chat, buf.getvalue(), "both", context.user_data, user_id)

# ---------- HEALTHZ ----------
def start_flask_healthz(port: int):
    app = Flask(__name__)
    @app.get("/healthz")
    def healthz(): return "ok", 200
    th = Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    th.daemon = True
    th.start()

# ---------- MAIN ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))

    start_flask_healthz(PORT)
    app.run_polling()

if __name__ == "__main__":
    main()
