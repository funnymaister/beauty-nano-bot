# === main.py (Beauty Nano Bot) ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º + –∞–¥–º–∏–Ω-–º–µ–Ω—é ===
import os, io, re, time, json, base64, asyncio, logging, uuid
from datetime import datetime
from threading import Thread
from typing import Dict, Any, List

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

# --- Sheets
import gspread
from google.oauth2.service_account import Credentials

# --- Flask Endpoints
from flask import Flask, request, jsonify

# --- Telegram
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler, filters, PreCheckoutQueryHandler
)

# --- YooKassa
from yookassa import Configuration as YKConf, Payment as YKPayment

# --- RefData
try:
    from refdata import REF
except Exception:
    class _DummyRef:
        def reload_all(self): pass
    REF = _DummyRef()

# ========== –õ–û–ì–ò ==========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s | %(message)s")
log = logging.getLogger("beauty-nano-bot")
for noisy in ("httpx", "gspread", "google", "werkzeug", "yookassa"):
    logging.getLogger(noisy).setLevel(logging.WARNING)

# ========== ENV / CONFIG ==========
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN: raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
if not GEMINI_API_KEY: raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY")

PORT = int(os.getenv("PORT", "8080"))
DATA_DIR = os.getenv("DATA_DIR", "./data")
os.makedirs(DATA_DIR, exist_ok=True)

RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))
IMAGE_MAX_SIDE = int(os.getenv("IMAGE_MAX_SIDE", "896"))

DEFAULT_FREE_LIMIT = int(os.getenv("FREE_LIMIT", "5"))
DEFAULT_PRICE_RUB  = int(os.getenv("PRICE_RUB",  "299"))

HISTORY_ENABLED = os.getenv("HISTORY_ENABLED", "1") == "1"
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", "10"))

SHEETS_ENABLED = os.getenv("SHEETS_ENABLED", "1") == "1"
SPREADSHEET_ID = os.getenv("GOOGLE_SHEETS_SPREADSHEET_ID")
SERVICE_JSON_B64 = os.getenv("GOOGLE_SHEETS_CREDS")

STARS_PRICE_XTR = int(os.getenv("STARS_PRICE_XTR", "1200"))
STARS_PAY_TITLE = os.getenv("STARS_PAY_TITLE", "–ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π")
STARS_PAY_DESC  = os.getenv("STARS_PAY_DESC", "–ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")

YK_SHOP_ID = os.getenv("YK_SHOP_ID")
YK_SECRET_KEY = os.getenv("YK_SECRET_KEY")
YK_RETURN_URL = os.getenv("YK_RETURN_URL", "https://example.com/yk/success")
if YK_SHOP_ID and YK_SECRET_KEY:
    YKConf.account_id = YK_SHOP_ID
    YKConf.secret_key = YK_SECRET_KEY

# —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
ADMINS_FILE   = os.path.join(DATA_DIR, "admins.json")
USERS_FILE    = os.path.join(DATA_DIR, "users.json")
USAGE_FILE    = os.path.join(DATA_DIR, "usage.json")
CONFIG_FILE   = os.path.join(DATA_DIR, "config.json")
FEEDBACK_FILE = os.path.join(DATA_DIR, "feedback.json")
HISTORY_FILE  = os.path.join(DATA_DIR, "history.json")
HISTORY_DIR   = os.path.join(DATA_DIR, "history"); os.makedirs(HISTORY_DIR, exist_ok=True)

def load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except Exception: return default
def save_json(path, data):
    try:
        with open(path, "w", encoding="utf-8") as f: json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e: log.warning("Can't save %s: %s", path, e)

# –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
def parse_admin_ids(val: str | None) -> set[int]:
    if not val: return set()
    ids=set()
    for p in val.replace(";",",").replace(" ",",").split(","):
        p=p.strip()
        if p.isdigit(): ids.add(int(p))
    return ids

seed_admins: set[int] = parse_admin_ids(os.getenv("ADMIN_IDS"))

ADMINS: set[int] = set(load_json(ADMINS_FILE, []))
if seed_admins: ADMINS |= seed_admins
save_json(ADMINS_FILE, list(ADMINS))

USERS: set[int] = set(load_json(USERS_FILE, []))
USAGE: Dict[int, Dict[str, Any]] = {int(k): v for k, v in load_json(USAGE_FILE, {}).items()}
CONFIG: Dict[str, Any] = load_json(CONFIG_FILE, {"FREE_LIMIT": DEFAULT_FREE_LIMIT, "PRICE_RUB": DEFAULT_PRICE_RUB})
FEEDBACK: Dict[str, int] = load_json(FEEDBACK_FILE, {"up": 0, "down": 0})
HISTORY: Dict[str, List[Dict[str, Any]]] = load_json(HISTORY_FILE, {})

def persist_all():
    save_json(ADMINS_FILE, list(ADMINS))
    save_json(USERS_FILE, list(USERS))
    save_json(USAGE_FILE, USAGE)
    save_json(CONFIG_FILE, CONFIG)
    save_json(FEEDBACK_FILE, FEEDBACK)
    save_json(HISTORY_FILE, HISTORY)

# ========== GEMINI ==========
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, –≤–∫–ª—é—á–∞—è Sheets, Users, Premium, Style, –†–µ–∂–∏–º—ã, History, Admin keyboards –∏ –ü—Ä–æ—Ñ–∏–ª—å)
# ---------- –ü—Ä–æ—Ñ–∏–ª—å (–æ–ø—Ä–æ—Å–Ω–∏–∫) ----------
P_AGE, P_SKIN, P_HAIR, P_GOALS = range(4)
def get_profile(user_data: dict) -> dict: return user_data.setdefault("profile", {})
def profile_to_text(pr: dict) -> str:
    if not pr: return "–ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç."
    parts=[]
    if pr.get("age"):  parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {pr['age']}")
    if pr.get("skin"): parts.append(f"–ö–æ–∂–∞: {pr['skin']}")
    if pr.get("hair"): parts.append(f"–í–æ–ª–æ—Å—ã: {pr['hair']}")
    if pr.get("goals"):parts.append(f"–¶–µ–ª–∏: {pr['goals']}")
    return "\n".join(parts)

async def profile_start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (5‚Äì100)")
    return P_AGE
async def profile_start_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query; await q.answer(); await q.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (5‚Äì100)"); return P_AGE
async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t=(update.message.text or "").strip()
    if not t.isdigit() or not (5 <= int(t) <= 100):
        return await update.message.reply_text("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 5 –¥–æ 100.")
    get_profile(context.user_data)["age"]=int(t)
    await update.message.reply_text("–û–ø–∏—à–∏ —Ç–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è):")
    return P_SKIN
async def profile_skin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["skin"]=(update.message.text or "").strip()[:100]
    await update.message.reply_text("–û–ø–∏—à–∏ —Ç–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–Ω–∫–∏–µ, —Å–∫–ª–æ–Ω–Ω—ã –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏):")
    return P_HAIR
async def profile_hair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["hair"]=(update.message.text or "").strip()[:120]
    await update.message.reply_text("–ö–∞–∫–∏–µ —Ü–µ–ª–∏/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ–Ω—å—à–µ –±–ª–µ—Å–∫–∞, –æ–±—ä—ë–º, –±–µ–∑ —Å—É–ª—å—Ñ–∞—Ç–æ–≤):")
    return P_GOALS
async def profile_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    get_profile(context.user_data)["goals"]=(update.message.text or "").strip()[:160]
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n"+profile_to_text(get_profile(context.user_data)))
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üíÑ",
                                    reply_markup=action_keyboard(update.effective_user.id, context.user_data))
    return ConversationHandler.END
async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–∏–ª. /profile ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# ---------- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é ----------
def _profile_context(user_data: dict) -> tuple[str, str]:
    pr = get_profile(user_data)
    parts = []
    if pr.get("age"):  parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {pr['age']}")
    if pr.get("skin"): parts.append(f"–ö–æ–∂–∞: {pr['skin']}")
    if pr.get("hair"): parts.append(f"–í–æ–ª–æ—Å—ã: {pr['hair']}")
    if pr.get("goals"):parts.append(f"–¶–µ–ª–∏: {pr['goals']}")
    human = "; ".join(parts)

    rules = []
    age  = pr.get("age")
    skin = (pr.get("skin") or "").lower()
    hair = (pr.get("hair") or "").lower()
    goals= (pr.get("goals") or "").lower()

    try:
        if age and int(age) < 18:
            rules.append("–î–æ 18 –ª–µ—Ç: –∏–∑–±–µ–≥–∞–π —Ä–µ—Ç–∏–Ω–æ–∏–¥–æ–≤ –∏ —Å–∏–ª—å–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç (>5%); —Ç–æ–ª—å–∫–æ –º—è–≥–∫–∏–π —É—Ö–æ–¥.")
    except Exception:
        pass

    g = f"{skin} {hair} {goals}"
    if any(k in g for k in ["–±–µ—Ä–µ–º–µ–Ω", "pregnan", "–≥–≤", "–ª–∞–∫—Ç–∞—Ü"]):
        rules.append("–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–ª–∞–∫—Ç–∞—Ü–∏—è: –±–µ–∑ —Ä–µ—Ç–∏–Ω–æ–∏–¥–æ–≤ –∏ BHA >1%, –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –æ—Ç–¥—É—à–µ–∫/—ç—Ñ–∏—Ä–Ω—ã—Ö –º–∞—Å–µ–ª; –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥, –ø–∞–Ω—Ç–µ–Ω–æ–ª, —Ü–µ—Ä–∞–º–∏–¥—ã, SPF.")
    if any(k in g for k in ["—Ä–æ–∑–∞—Ü–µ", "–∫—É–ø–µ—Ä–æ–∑", "rosacea"]):
        rules.append("–†–æ–∑–∞—Ü–µ–∞/–∫—É–ø–µ—Ä–æ–∑: –∏–∑–±–µ–≥–∞–π AHA/BHA –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ—Ç–∏–Ω–æ–∏–¥–æ–≤; —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, –±–µ–∑ —Å–ø–∏—Ä—Ç–æ–≤ –∏ –æ—Ç–¥—É—à–µ–∫; –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π SPF.")
    if any(k in g for k in ["—Å–µ–±–æ—Ä", "sd", "seborr"]):
        rules.append("–°–µ–±–æ—Ä–µ–π–Ω—ã–π –¥–µ—Ä–º–∞—Ç–∏—Ç: –º—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Ü–∏–Ω–∫ PCA, –ø–∏—Ä–æ–∫—Ç–æ–Ω –æ–ª–∞–º–∏–Ω); –∏–∑–±–µ–≥–∞–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –ü–ê–í/—Å–∫—Ä–∞–±–æ–≤.")

    if "—á—É–≤—Å—Ç–≤" in skin:
        rules.append("–ö–æ–∂–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è: –±–µ–∑ –æ—Ç–¥—É—à–µ–∫ –∏ —Å–ø–∏—Ä—Ç–æ–≤; –∏–∑–±–µ–≥–∞–π —Å–∏–ª—å–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç; –ø–∞–Ω—Ç–µ–Ω–æ–ª/—Ü–µ—Ä–∞–º–∏–¥—ã/–∞–ª–æ—ç.")
    if "–∂–∏—Ä" in skin or "–∞–∫–Ω–µ" in skin:
        rules.append("–ö–æ–∂–∞ –∂–∏—Ä–Ω–∞—è/—Å–∫–ª–æ–Ω–Ω–∞—è –∫ –∞–∫–Ω–µ: –ª—ë–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ BHA 1‚Äì2%; SPF –±–µ–∑ –º–∞—Å–µ–ª.")
    if "—Å—É—Ö" in skin:
        rules.append("–ö–æ–∂–∞ —Å—É—Ö–∞—è: –º—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ, –ª–∏–ø–∏–¥–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º.")
    if "–ø–∏–≥–º–µ–Ω—Ç" in skin:
        rules.append("–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è: –¥–Ω–µ–≤–Ω–æ–π SPF –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω; –º—è–≥–∫–∏–µ –æ—Å–≤–µ—Ç–ª—è—é—â–∏–µ (–Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥, –∞—Ä–±—É—Ç–∏–Ω).")

    if "–∫—É–¥—Ä" in hair:
        rules.append("–ö—É–¥—Ä—è–≤—ã–µ –≤–æ–ª–æ—Å—ã: –±–µ–∑ —Å—É–ª—å—Ñ–∞—Ç–æ–≤; –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ; –¥–∏—Ñ—Ñ—É–∑–æ—Ä –Ω–∞ –Ω–∏–∑–∫–æ–º –Ω–∞–≥—Ä–µ–≤–µ.")
    if "–∫—Ä–∞—à–µ–Ω" in hair or "–æ—Å–≤–µ—Ç–ª" in hair:
        rules.append("–û–∫—Ä–∞—à–µ–Ω–Ω—ã–µ/–ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ: –±–µ—Ä–µ–∂–Ω—ã–µ —à–∞–º–ø—É–Ω–∏, –º–∞—Å–∫–∏ —Å –ø—Ä–æ—Ç–µ–∏–Ω–∞–º–∏/–ª–∏–ø–∏–¥–∞–º–∏, —Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞.")

    if goals:
        rules.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {goals}.")

    base = (
        "–£—á–∏—Ç—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∏–∂–µ. –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –æ–±—â–∏–º —Å–æ–≤–µ—Ç–æ–º ‚Äî –≤—ã–±–∏—Ä–∞–π –º—è–≥–∫–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. "
        "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è ‚òÄÔ∏è —É—Ç—Ä–æ / üå§Ô∏è –¥–µ–Ω—å / üåô –≤–µ—á–µ—Ä. –ù–µ –æ–±—Å—É–∂–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ."
    )
    rules_text = ("–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:\n- " + "\n- ".join(rules)) if rules else \
                 "–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    return human, base + "\n" + rules_text

# ========== –ê–ù–ê–õ–ò–ó –§–û–¢–û ==========
LAST_ANALYSIS_AT: Dict[int,float] = {}

# ===== REPLACE WHOLE FUNCTION _process_image_bytes WITH THIS ONE =====
LAST_ANALYSIS_AT: Dict[int, float] = {}

async def _process_image_bytes(
    chat,
    img_bytes: bytes,
    mode: str,
    user_data: dict,
    user_id: int,
    username: str | None,
):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≤—ã–∑–æ–≤ Gemini."""
    # –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    if not check_usage(user_id):
        return await chat.send_message(
            "üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏ üåü –ü—Ä–µ–º–∏—É–º.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
                    [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")],
                ]
            ),
        )

    # –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
    pr = get_profile(user_data)
    if not any(pr.get(k) for k in ("age", "skin", "hair", "goals")):
        try:
            await chat.send_message(
                "–•–æ—á–µ—à—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏? –ó–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å üßë‚Äçüíº",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üßë‚Äçüíº –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]]
                ),
            )
        except Exception:
            pass

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        def _prep(b: bytes) -> bytes:
            im = Image.open(io.BytesIO(b)).convert("RGB")
            im.thumbnail((IMAGE_MAX_SIDE, IMAGE_MAX_SIDE))
            buf = io.BytesIO()
            im.save(buf, format="JPEG", quality=85, optimize=True)
            return buf.getvalue()

        jpeg_bytes = await asyncio.to_thread(_prep, img_bytes)
    except Exception:
        log.exception("PIL convert")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    human_profile, rule_block = _profile_context(user_data)

    # —Å–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ + –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    try:
        b64 = base64.b64encode(jpeg_bytes).decode("utf-8")

        system_prompt = (
            "–¢—ã –±—å—é—Ç–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–µ–∂–∏–º–∞: "
            f"{mode}. –£—á–∏—Ç—ã–≤–∞–π –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∏–∂–µ.\n\n"
            f"{rule_block}"
        )

        payload = [
            system_prompt,
            {"inline_data": {"mime_type": "image/jpeg", "data": b64}},
        ]

        resp = await asyncio.to_thread(model.generate_content, payload)
        text = (getattr(resp, "text", "") or "").strip() or "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π."
        try:
            # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
            # text = remove_photo_tips(text)
            pass
        except Exception:
            pass

        # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        def style_response(raw_text: str, mode: str) -> str:
            txt = _emoji_bullets(raw_text.strip().replace("\r", "\n"))
            txt = _themed_headings(txt)
            head = f"<b>üíÑ Beauty Nano ‚Äî {MODES.get(mode, '–ê–Ω–∞–ª–∏–∑')}</b>\n"
            badge = f"<i>‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å: {html_escape(human_profile)}</i>\n" if human_profile else ""
            sep = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            tail = "\n<i>–ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ.</i>"
            return head + badge + sep + txt + tail

        await send_html_long(chat, style_response(text, mode), keyboard=action_keyboard(user_id, user_data))

        # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        asyncio.create_task(asyncio.to_thread(save_history, user_id, mode, jpeg_bytes, text))
        asyncio.create_task(asyncio.to_thread(sheets_log_analysis, user_id, username, mode, text))

        await chat.send_message(get_usage_text(user_id))
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
# ===== END OF REPLACEMENT =====


async def on_photo(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id; ensure_user(uid)
    now=time.time()
    if now-LAST_ANALYSIS_AT.get(uid,0)<RATE_LIMIT_SECONDS:
        return await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
    LAST_ANALYSIS_AT[uid]=now
    file=await update.message.photo[-1].get_file()
    buf=io.BytesIO(); await file.download_to_memory(out=buf)
    await _process_image_bytes(
        update.effective_chat, buf.getvalue(),
        get_mode(context.user_data), context.user_data, uid,
        getattr(update.effective_user,"username",None)
    )

# ---------- –°—Ç–∏–ª—å/—Ç–µ–∫—Å—Ç (—Ö–µ–ª–ø–µ—Ä—ã) ----------
SAFE_CHUNK = 3500
def html_escape(s: str) -> str:
    return s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")

def _emoji_bullets(text: str) -> str:
    colors=["üü¢","üü°","üîµ","üü£","üü†"]; i=0; out=[]
    for line in (text or "").splitlines():
        if re.match(r"^\s*(?:[‚Ä¢\-\*\u2022]|[0-9]+\.)\s+", line):
            bullet=colors[i%len(colors)]; i+=1
            line=re.sub(r"^\s*(?:[‚Ä¢\-\*\u2022]|[0-9]+\.)\s+", bullet+" ", line)
        line=re.sub(r"\b(—É—Ç—Ä–æ|—É—Ç—Ä–µ–Ω–Ω–∏–π)\b","‚òÄÔ∏è —É—Ç—Ä–æ", line, flags=re.I)
        line=re.sub(r"\b(–¥–µ–Ω—å|–¥–Ω—ë–º|–¥–Ω–µ–≤–Ω–æ–π)\b","üå§Ô∏è –¥–µ–Ω—å", line, flags=re.I)
        line=re.sub(r"\b(–≤–µ—á–µ—Ä|–≤–µ—á–µ—Ä–Ω–∏–π)\b","üåô –≤–µ—á–µ—Ä", line, flags=re.I)
        out.append(line)
    return "\n".join(out)

def _themed_headings(text: str) -> str:
    themed=[]
    for ln in (text or "").splitlines():
        m=re.match(r"^\s*(—É—Ç—Ä–æ|–¥–µ–Ω—å|–≤–µ—á–µ—Ä|–Ω–æ—á[—å—å–∏]|–Ω–æ—á–Ω–æ–π|sos|—Å–æ–≤–µ—Ç—ã|—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü(–∏–∏|–∏—è))\b[:\-‚Äì]?\s*(.*)$", ln, flags=re.I)
        if m:
            key=m.group(1).lower(); rest=m.group(3); emo="‚ú®"
            if key.startswith("—É—Ç—Ä–æ"): emo="‚òÄÔ∏è"
            elif key.startswith("–¥–µ–Ω—å"): emo="üå§Ô∏è"
            elif key.startswith("–≤–µ—á–µ—Ä"): emo="üåô"
            elif key.startswith("–Ω–æ—á"): emo="üåò"
            elif key=="sos": emo="üöë"
            elif key.startswith("—Å–æ–≤–µ—Ç—ã") or key.startswith("—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü"): emo="üéØ"
            title=key.capitalize()
            ln=f"<b>{emo} {html_escape(title)}</b>"
            if rest: ln+=f"\n{html_escape(rest)}"
            themed.append(ln)
        else:
            themed.append(html_escape(ln))
    return "\n".join(themed)

def _split_chunks(s: str, limit:int=SAFE_CHUNK)->list[str]:
    s=s.strip(); parts=[]
    while len(s)>limit:
        cut=s.rfind("\n\n",0,limit)
        if cut==-1: cut=s.rfind("\n",0,limit)
        if cut==-1: cut=limit
        parts.append(s[:cut].strip()); s=s[cut:].strip()
    if s: parts.append(s)
    return parts

from contextlib import suppress
from telegram.error import BadRequest

async def safe_answer(q):
    """–ú—è–≥–∫–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback_query –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç—É—Ö—à–∏–π/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π id."""
    if not q:
        return
    with suppress(BadRequest, TimeoutError, Exception):
        # cache_time –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º—É –Ω–µ —Å–ø–∞–º–∏—Ç—å
        await q.answer(cache_time=1)


async def send_html_long(chat, html_text:str, keyboard=None):
    chunks=_split_chunks(html_text, SAFE_CHUNK)
    if not chunks: return
    for part in chunks[:-1]:
        try: await chat.send_message(part, parse_mode="HTML")
        except BadRequest: await chat.send_message(re.sub(r"<[^>]+>","",part))
    last=chunks[-1]
    try: await chat.send_message(last, parse_mode="HTML", reply_markup=keyboard)
    except BadRequest: await chat.send_message(re.sub(r"<[^>]+>","",last), reply_markup=keyboard)


# ---------- –†–µ–∂–∏–º—ã ----------
MODES = {"face": "–õ–∏—Ü–æ", "hair": "–í–æ–ª–æ—Å—ã", "both": "–õ–∏—Ü–æ + –í–æ–ª–æ—Å—ã"}

def get_mode(user_data: dict) -> str:
    return user_data.get("mode", "both")

def set_mode(user_data: dict, mode: str) -> None:
    if mode in MODES:
        user_data["mode"] = mode

def mode_keyboard(active: str) -> InlineKeyboardMarkup:
    def label(key):
        name = MODES.get(key, key)
        return f"‚úÖ {name}" if key == active else name
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(label("face"), callback_data="mode:face"),
         InlineKeyboardButton(label("hair"), callback_data="mode:hair")],
        [InlineKeyboardButton(label("both"), callback_data="mode:both")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

# ---------- –ò—Å—Ç–æ—Ä–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ + Sheets) ----------
def _hist_user_dir(uid:int)->str:
    p=os.path.join(HISTORY_DIR,str(uid)); os.makedirs(p,exist_ok=True); return p

def save_history(uid:int, mode:str, jpeg_bytes:bytes, text:str)->None:
    if not HISTORY_ENABLED: return
    try:
        ts=int(time.time()); udir=_hist_user_dir(uid)
        img=os.path.join(udir,f"{ts}.jpg"); txt=os.path.join(udir,f"{ts}.txt")
        with open(img,"wb") as f: f.write(jpeg_bytes)
        with open(txt,"w",encoding="utf-8") as f: f.write(text)
        key=str(uid); items=HISTORY.get(key,[])
        items.append({"ts":ts,"mode":mode,"img":img,"txt":txt})
        items=sorted(items,key=lambda x:x["ts"],reverse=True)[:HISTORY_LIMIT]
        HISTORY[key]=items; persist_all()
    except Exception as e: log.warning("history save failed: %s", e)

def sheets_init():
    global _gc,_sh
    if not SHEETS_ENABLED: return
    if not SPREADSHEET_ID or not SERVICE_JSON_B64:
        log.warning("Sheets env missing"); return
    try:
        creds_info=json.loads(base64.b64decode(SERVICE_JSON_B64))
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
        credentials=Credentials.from_service_account_info(creds_info, scopes=scopes)
        _gc=gspread.authorize(credentials); _sh=_gc.open_by_key(SPREADSHEET_ID)
        def _ensure_ws(title: str, headers: List[str]):
            try: return _sh.worksheet(title)
            except gspread.WorksheetNotFound:
                ws=_sh.add_worksheet(title=title, rows="200", cols=str(max(20, len(headers)+5)))
                ws.append_row(headers); return ws
        _ensure_ws("users",    ["ts","user_id","username","is_admin","premium"])
        _ensure_ws("analyses", ["ts","user_id","username","mode","premium","free_used","text"])
        _ensure_ws("feedback", ["ts","user_id","value"])
        _ensure_ws("promos",   ["code","bonus_days","uses_left","expires_ts","note"])
        log.info("Sheets connected")
    except Exception as e:
        log.exception("Sheets init failed: %s", e)

def sheets_log_user(user_id:int, username:str|None):
    if not _sh: return
    try:
        _sh.worksheet("users").append_row(
            [int(time.time()), user_id, username or "", bool(user_id in ADMINS), bool(USAGE.get(user_id,{}).get("premium"))],
            value_input_option="USER_ENTERED")
    except Exception as e: log.warning("sheets_log_user failed: %s", e)

def sheets_log_analysis(user_id:int, username:str|None, mode:str, text:str):
    if not _sh: return
    try:
        u=USAGE.get(user_id, {})
        _sh.worksheet("analyses").append_row(
            [int(time.time()), user_id, username or "", mode, bool(u.get("premium")), int(u.get("count",0)), text[:10000]],
            value_input_option="USER_ENTERED")
    except Exception as e: log.warning("sheets_log_analysis failed: %s", e)

def sheets_log_feedback(user_id:int, value:str):
    if not _sh: return
    try:
        _sh.worksheet("feedback").append_row([int(time.time()), user_id, value], value_input_option="USER_ENTERED")
    except Exception as e: log.warning("sheets_log_feedback failed: %s", e)

def sheets_fetch_history(user_id:int, limit:int=20)->List[Dict[str,Any]]:
    if not _sh: return []
    try:
        ws=_sh.worksheet("analyses"); rows=ws.get_all_records(numericise_ignore=["all"])
        out=[]
        for r in rows:
            try:
                if int(str(r.get("user_id","-1")).strip())!=int(user_id): continue
                ts_raw=str(r.get("ts","")).strip()
                ts=int(ts_raw) if ts_raw.isdigit() else int(time.time())
                mode=(str(r.get("mode","both")) or "both").strip().lower()
                text=(r.get("text") or "").strip()
                out.append({"ts":ts,"mode":mode,"img":None,"txt_inline":text})
            except Exception: continue
        out.sort(key=lambda x:x["ts"], reverse=True)
        return out[:limit]
    except Exception as e:
        log.warning("sheets_fetch_history failed: %s", e)
        return []

def list_history(uid:int)->List[Dict[str,Any]]:
    local=HISTORY.get(str(uid),[])
    remote=sheets_fetch_history(uid, limit=20) if _sh else []
    norm=[]
    for e in local:
        norm.append({"ts":int(e["ts"]), "mode":e.get("mode","both"),
                     "img":e.get("img"), "txt":e.get("txt"), "txt_inline":None})
    for e in remote:
        norm.append({"ts":int(e["ts"]), "mode":e.get("mode","both"),
                     "img":None, "txt":None, "txt_inline":e.get("txt_inline","")})
    uniq={}
    for e in norm:
        uniq.setdefault(e["ts"], e)
    items=sorted(uniq.values(), key=lambda x:x["ts"], reverse=True)
    return items[:HISTORY_LIMIT]

def history_keyboard(uid:int)->InlineKeyboardMarkup:
    entries=list_history(uid)
    if not entries:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",callback_data="home")]])
    rows=[]
    for e in entries[:10]:
        dt=datetime.fromtimestamp(e["ts"]).strftime("%d.%m %H:%M")
        mode={"face":"–õ–∏—Ü–æ","hair":"–í–æ–ª–æ—Å—ã","both":"–õ–∏—Ü–æ + –í–æ–ª–æ—Å—ã"}.get(e.get("mode","both"),"")
        rows.append([InlineKeyboardButton(f"üì∏ {dt} ‚Ä¢ {mode}", callback_data=f"hist:{e['ts']}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(rows)

# ---------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/–ª–∏–º–∏—Ç—ã/—Ü–µ–Ω—ã ----------
def usage_entry(user_id:int)->Dict[str,Any]:
    now=datetime.utcnow(); m=now.month
    u=USAGE.setdefault(user_id, {"count":0,"month":m,"premium":False})
    if int(u.get("premium_until", 0)) < int(time.time()):
        u["premium"] = False
    if u.get("month")!=m: u["count"]=0; u["month"]=m
    return u

def has_premium(user_id:int)->bool:
    u=usage_entry(user_id)
    if u.get("premium"): return True
    pu=int(u.get("premium_until",0))
    if pu and pu>int(time.time()):
        u["premium"]=True; return True
    return False

def grant_premium(user_id:int, days:int=30):
    u=usage_entry(user_id)
    base=max(int(time.time()), int(u.get("premium_until",0)))
    till=base+days*24*3600
    u["premium"]=True; u["premium_until"]=till
    persist_all(); return till

def extend_premium_days(user_id:int, days:int=30)->int:
    return grant_premium(user_id, days)

def check_usage(user_id:int)->bool:
    u=usage_entry(user_id)
    if has_premium(user_id): return True
    limit=int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    if u["count"]<limit:
        u["count"]+=1; persist_all(); return True
    return False

def get_usage_text(user_id:int)->str:
    u=usage_entry(user_id)
    if has_premium(user_id):
        exp=datetime.fromtimestamp(int(u.get("premium_until", time.time()))).strftime("%d.%m.%Y")
        return f"üåü –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {exp}."
    limit=int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    left=max(0, limit-u["count"])
    return f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {left} –∏–∑ {limit}."

def ensure_user(user_id:int):
    if user_id not in USERS: USERS.add(user_id); persist_all()

# ---------- –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω—ã–µ ----------
def action_keyboard(for_user_id: int, user_data: dict | None = None) -> InlineKeyboardMarkup:
    premium = has_premium(for_user_id)
    rows: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu"),
         InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
         InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")],
    ]
    if premium:
        rows.append([InlineKeyboardButton("üí≥ –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏", callback_data="payments_me")])
    else:
        rows.append([InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º", callback_data="premium")])
    if for_user_id in ADMINS:
        rows.append([InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin")])
    return InlineKeyboardMarkup(rows)


def premium_menu_kb() -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    # YooKassa –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    if os.getenv("YK_SHOP_ID") and os.getenv("YK_SECRET_KEY"):
        rows.append([InlineKeyboardButton("üí≥ YooKassa (RUB)", callback_data="pay:yookassa")])
    # Stars ‚Äî –≤—Å–µ–≥–¥–∞
    rows.append([InlineKeyboardButton("‚≠êÔ∏è Telegram Stars", callback_data="pay:stars")])
    # –¢—Ä–∏–∞–ª –∏ –ø—Ä–æ–º–æ–∫–æ–¥
    rows.append([
        InlineKeyboardButton("üéÅ –¢—Ä–∏–∞–ª 24—á", callback_data="trial"),
        InlineKeyboardButton("üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    ])
    # –ù–∞–∑–∞–¥
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(rows)


# ---------- –ê–¥–º–∏–Ω-–º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) ----------
def admin_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:pick_users"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",  callback_data="admin:stats")],
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∏",    callback_data="admin:subs"),
         InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞",    callback_data="admin:broadcast")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã",      callback_data="admin:bonus"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",   callback_data="admin:settings")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", callback_data="admin:reload_refs")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

def _user_short_row(u_id: int) -> str:
    u = USAGE.get(u_id, {})
    prem = int(u.get("premium_until", 0)) > int(time.time())
    adm  = (u_id in ADMINS)
    badges = []
    if prem: badges.append("üåü")
    if adm:  badges.append("‚≠ê")
    tag = " ".join(badges)
    exp = datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y %H:%M") if u.get("premium_until") else "‚Äî"
    return f"{u_id} ‚Ä¢ –¥–æ {exp} {tag}".strip()

def admin_users_list_kb(page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    ids = sorted(list(USERS))
    total = len(ids)
    start = max(0, page * per_page)
    end   = min(total, start + per_page)
    page_ids = ids[start:end]

    rows: list[list[InlineKeyboardButton]] = []
    if not page_ids:
        rows.append([InlineKeyboardButton("–ü–æ–∫–∞ –ø—É—Å—Ç–æ", callback_data="noop")])
    else:
        for uid in page_ids:
            rows.append([InlineKeyboardButton(_user_short_row(uid), callback_data=f"admin:user:{uid}")])

    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:users_page:{page-1}"))
    if end < total:
        nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin:users_page:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append([InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin")])
    return InlineKeyboardMarkup(rows)

def admin_user_card_kb(target_id: int) -> InlineKeyboardMarkup:
    is_admin = (target_id in ADMINS)
    rows = [
        [InlineKeyboardButton("‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å +30 –¥–Ω.", callback_data=f"admin:user_action:add30:{target_id}")],
        [InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º",    callback_data=f"admin:user_action:clear:{target_id}")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ", callback_data=f"admin:user_action:resetfree:{target_id}")]
    ]
    if is_admin:
        rows.append([InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"admin:user_action:unadmin:{target_id}")])
    else:
        rows.append([InlineKeyboardButton("‚≠ê –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"admin:user_action:admin:{target_id}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin:pick_users")])
    rows.append([InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin")])
    return InlineKeyboardMarkup(rows)

def admin_settings_kb() -> InlineKeyboardMarkup:
    L = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    P = int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB))
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"FREE_LIMIT: {L}", callback_data="noop")],
        [InlineKeyboardButton("‚àí1", callback_data="admin:cfg:limit:-1"),
         InlineKeyboardButton("+1", callback_data="admin:cfg:limit:+1"),
         InlineKeyboardButton("+10", callback_data="admin:cfg:limit:+10")],
        [InlineKeyboardButton(f"PRICE_RUB: {P}", callback_data="noop")],
        [InlineKeyboardButton("‚àí10", callback_data="admin:cfg:price:-10"),
         InlineKeyboardButton("+10", callback_data="admin:cfg:price:+10"),
         InlineKeyboardButton("+100", callback_data="admin:cfg:price:+100")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

def admin_subs_list_kb() -> InlineKeyboardMarkup:
    now = int(time.time()); candidates = []
    for uid, u in USAGE.items():
        if int(u.get("premium_until", 0)) > now:
            candidates.append(int(uid))
    candidates = sorted(candidates, key=lambda i: int(USAGE.get(i, {}).get("premium_until", 0)), reverse=True)[:12]
    rows = []
    for i in candidates:
        u = usage_entry(i); exp = datetime.fromtimestamp(u.get("premium_until",0)).strftime("%d.%m.%Y %H:%M") if u.get("premium_until") else "‚Äî"
        rows.append([InlineKeyboardButton(f"{i} ‚Ä¢ –¥–æ {exp}", callback_data=f"admin:subs_user:{i}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])
    return InlineKeyboardMarkup(rows)

def admin_subs_user_kb(target_id: int) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("‚ûï +30 –¥–Ω–µ–π", callback_data=f"admin:subs_action:add30:{target_id}"),
         InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data=f"admin:subs_action:clear:{target_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin:subs_list")]
    ]
    return InlineKeyboardMarkup(rows)

# ---------- CallbackHandler ----------
ADMIN_STATE: Dict[int, Dict[str,Any]] = {}
USER_STATE:  Dict[int, Dict[str,Any]] = {}

def payments_me_kb(uid:int)->InlineKeyboardMarkup:
    u=usage_entry(uid)
    rows=[[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]]
    return InlineKeyboardMarkup(rows)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "").strip()
    uid = update.effective_user.id
    ensure_user(uid)

    # –í–ê–ñ–ù–û: –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, –î–û –ª—é–±—ã—Ö –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await safe_answer(q)

    # –¥–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞:
    if data == "home":
        return await q.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Å–¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ üíÑ",
                                          reply_markup=action_keyboard(uid, context.user_data))
    ...


    # –ø—Ä–æ—Ñ–∏–ª—å (–∏–∑ –∫–Ω–æ–ø–∫–∏)
    if data == "profile":
        await q.answer()
        return await profile_start_cb(update, context)

    # –ø—Ä–µ–º–∏—É–º/–ª–∏–º–∏—Ç—ã
    if data == "premium":
        price = int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB))
        txt = (
            "üåü <b>–ü—Ä–µ–º–∏—É–º</b>\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price} ‚ÇΩ  /  ‚≠êÔ∏è {STARS_PRICE_XTR}\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã/–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
        )
        return await q.message.reply_text(txt, parse_mode="HTML", reply_markup=premium_menu_kb())

    if data=="limits":
        await q.answer()
        free_limit = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
        price_rub  = int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB))
        txt = ("‚ÑπÔ∏è <b>–õ–∏–º–∏—Ç—ã –∏ —Ü–µ–Ω–∞</b>\n"
               f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {free_limit} –∞–Ω–∞–ª–∏–∑–æ–≤/–¥–µ–Ω—å\n"
               f"‚Ä¢ –ü—Ä–µ–º–∏—É–º: –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π\n"
               f"‚Ä¢ –¶–µ–Ω–∞: {price_rub} ‚ÇΩ  /  ‚≠êÔ∏è {STARS_PRICE_XTR}")
        return await q.message.reply_text(txt, parse_mode="HTML")

    # –∏—Å—Ç–æ—Ä–∏—è
    if data=="history":
        await q.answer()
        entries = list_history(uid)
        if not entries:
            return await q.message.reply_text(
                "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî –∏ —è —Å–æ—Ö—Ä–∞–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç üìí",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")]])
            )
        return await q.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=history_keyboard(uid))

    if data.startswith("hist:"):
        await q.answer()
        try: ts = int(data.split(":",1)[1])
        except Exception: return await q.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=history_keyboard(uid))
        entry = next((e for e in list_history(uid) if int(e["ts"]) == ts), None)
        if not entry: return await q.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=history_keyboard(uid))
        async def _read_file_text(path:str)->str:
            try:
                with open(path,"r",encoding="utf-8") as f: return f.read()
            except Exception: return ""
        dt=datetime.fromtimestamp(int(entry["ts"])).strftime("%d.%m.%Y %H:%M")
        mode_title={"face":"–õ–∏—Ü–æ","hair":"–í–æ–ª–æ—Å—ã","both":"–õ–∏—Ü–æ + –í–æ–ª–æ—Å—ã"}.get(entry.get("mode","both"),"–ê–Ω–∞–ª–∏–∑")
        head=f"<b>üíÑ –ò—Å—Ç–æ—Ä–∏—è ‚Äî {mode_title}</b>\n<i>{dt}</i>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text=entry.get("txt_inline") or (await asyncio.to_thread(_read_file_text, entry.get("txt",""))) or "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        styled=_themed_headings(_emoji_bullets(text))
        kb=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="history")],
                                 [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")]])
        if entry.get("img") and os.path.exists(entry["img"]):
            try:
                with open(entry["img"], "rb") as f: await q.message.chat.send_photo(photo=f, caption=f"üì∏ {dt}")
            except Exception as e: log.warning("send_photo failed: %s", e)
        await send_html_long(q.message.chat, head+styled, keyboard=kb)

    # —Ñ–∏–¥–±–µ–∫
    if data == "fb:up":
        FEEDBACK["up"] = FEEDBACK.get("up", 0) + 1
        persist_all()
        try: sheets_log_feedback(uid, "up")
        except Exception: pass
        await q.answer("–°–ø–∞—Å–∏–±–æ! üíú")
        return await q.message.reply_text(
            f"üëç {FEEDBACK.get('up',0)}  |  üëé {FEEDBACK.get('down',0)}",
            reply_markup=action_keyboard(uid, context.user_data)
        )
    if data == "fb:down":
        FEEDBACK["down"] = FEEDBACK.get("down", 0) + 1
        persist_all()
        try: sheets_log_feedback(uid, "down")
        except Exception: pass
        await q.answer("–ü—Ä–∏–Ω—è—Ç–æ üëå")
        return await q.message.reply_text(
            f"üëç {FEEDBACK.get('up',0)}  |  üëé {FEEDBACK.get('down',0)}",
            reply_markup=action_keyboard(uid, context.user_data)
        )

    # —Ä–µ–∂–∏–º
    if data == "mode_menu":
        await q.answer()
        cur = get_mode(context.user_data)
        return await q.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES.get(cur, cur)}\n–í—ã–±–µ—Ä–∏:",
            reply_markup=mode_keyboard(cur)
        )
    if data.startswith("mode:"):
        await q.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")
        m = data.split(":", 1)[1]; set_mode(context.user_data, m)
        return await q.message.reply_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MODES.get(m, m)}\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.",
            reply_markup=action_keyboard(uid, context.user_data)
        )

    # –∞–¥–º–∏–Ω
    if data == "admin":
        if uid not in ADMINS: return await q.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        return await q.message.reply_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_keyboard())

    if data.startswith("admin:"):
        if uid not in ADMINS: return await q.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        parts = data.split(":"); cmd = parts[1] if len(parts)>1 else ""

        if cmd == "pick_users":
            return await q.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=admin_users_list_kb(page=0))
        if cmd == "users_page" and len(parts) >= 3:
            try: page = int(parts[2])
            except Exception: page = 0
            return await q.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=admin_users_list_kb(page=page))
        if cmd == "user" and len(parts) >= 3 and parts[2].isdigit():
            target = int(parts[2]); u = usage_entry(target)
            exp = datetime.fromtimestamp(u.get('premium_until',0)).strftime("%d.%m.%Y %H:%M") if u.get("premium_until") else "‚Äî"
            txt = (f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target}\n"
                   f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –¥–æ: {exp}\n"
                   f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u.get('count',0)} / {CONFIG.get('FREE_LIMIT', DEFAULT_FREE_LIMIT)}\n"
                   f"‚Ä¢ –ê–¥–º–∏–Ω: {'–¥–∞' if target in ADMINS else '–Ω–µ—Ç'}")
            return await q.message.reply_text(txt, reply_markup=admin_user_card_kb(target))
        if cmd == "user_action" and len(parts) >= 4:
            action = parts[2]
            try: target = int(parts[3])
            except Exception: return await q.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.", reply_markup=admin_main_keyboard())
            u = usage_entry(target)
            if action == "add30":
                till = extend_premium_days(target, 30)
                return await q.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –¥–æ {datetime.fromtimestamp(till):%d.%m.%Y %H:%M}", reply_markup=admin_user_card_kb(target))
            if action == "clear":
                u["premium"] = False; u["premium_until"] = 0; persist_all()
                return await q.message.reply_text("‚úÖ –ü—Ä–µ–º–∏—É–º —Å–Ω—è—Ç.", reply_markup=admin_user_card_kb(target))
            if action == "resetfree":
                u["count"] = 0; persist_all()
                return await q.message.reply_text("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=admin_user_card_kb(target))
            if action == "admin":
                ADMINS.add(target); persist_all()
                return await q.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.", reply_markup=admin_user_card_kb(target))
            if action == "unadmin":
                if target in ADMINS: ADMINS.remove(target); persist_all()
                return await q.message.reply_text("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —Å–Ω—è—Ç—ã.", reply_markup=admin_user_card_kb(target))

        if cmd == "stats":
            total_users = len(USERS)
            premium_active = sum(1 for u in USAGE.values() if int(u.get("premium_until",0)) > int(time.time()))
            up = int(FEEDBACK.get("up",0)); down = int(FEEDBACK.get("down",0))
            analyses = 0
            if _sh:
                try:
                    analyses = len(_sh.worksheet("analyses").get_all_values()) - 1
                    if analyses < 0: analyses = 0
                except Exception: pass
            else:
                analyses = sum(len(v) for v in HISTORY.values())
            txt = ("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
                   f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                   f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö: {premium_active}\n"
                   f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤: {analyses}\n"
                   f"‚Ä¢ –û—Ç–∑—ã–≤—ã: üëç {up} / üëé {down}")
            return await q.message.reply_text(txt, parse_mode="HTML", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]]))

        if cmd == "broadcast":
            ADMIN_STATE[uid] = {"await": "broadcast"}
            return await q.message.reply_text("üì£ –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–û—Ç–ø—Ä–∞–≤–ª—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. /cancel ‚Äî –æ—Ç–º–µ–Ω–∞.")

        if cmd == "bonus":
            till = extend_premium_days(uid, 7)
            return await q.message.reply_text(f"üéÅ –°–µ–±–µ –≤—ã–¥–∞–Ω–æ +7 –¥–Ω. (–¥–æ {datetime.fromtimestamp(till):%d.%m.%Y %H:%M})", reply_markup=admin_main_keyboard())

        if cmd == "settings":
            return await q.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=admin_settings_kb())

        if cmd == "cfg" and len(parts) >= 4:
            what = parts[2]; delta_raw = parts[3]
            try: delta = int(delta_raw)
            except: delta = 0
            if what == "limit":
                CONFIG["FREE_LIMIT"] = max(0, int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT)) + delta)
            if what == "price":
                CONFIG["PRICE_RUB"] = max(0, int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB)) + delta)
            persist_all()
            return await q.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=admin_settings_kb())

        if cmd == "subs":
            return await q.message.reply_text("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", reply_markup=admin_subs_list_kb())
        if cmd == "subs_list":
            return await q.message.reply_text("üí≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:",   reply_markup=admin_subs_list_kb())
        if cmd == "subs_user" and len(parts) >= 3 and parts[2].isdigit():
            target=int(parts[2]); u=usage_entry(target)
            exp=datetime.fromtimestamp(u.get('premium_until',0)).strftime("%d.%m.%Y %H:%M") if u.get("premium_until") else "‚Äî"
            txt=(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target}\n"
                 f"‚Ä¢ –ü—Ä–µ–º–∏—É–º –¥–æ: {exp}")
            return await q.message.reply_text(txt, reply_markup=admin_subs_user_kb(target))
        if cmd == "subs_action" and len(parts) >= 4:
            action=parts[2]; target=int(parts[3]); u=usage_entry(target)
            if action=="add30":
                till=extend_premium_days(target,30)
                return await q.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –¥–æ {datetime.fromtimestamp(till):%d.%–º.%Y %H:%M}", reply_markup=admin_subs_user_kb(target))
            if action=="clear":
                u["premium"]=False; u["premium_until"]=0; persist_all()
                return await q.message.reply_text("‚úÖ –ü—Ä–µ–º–∏—É–º —Å–Ω—è—Ç.", reply_markup=admin_subs_user_kb(target))

        if cmd == "reload_refs":
            try:
                REF.reload_all()
                return await q.message.reply_text("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=admin_main_keyboard())
            except Exception as e:
                return await q.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: {e}", reply_markup=admin_main_keyboard())

async def on_text(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    # –∞–¥–º–∏–Ω—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    ast = ADMIN_STATE.get(uid)
    if uid in ADMINS and ast and ast.get("await") == "broadcast":
        ADMIN_STATE.pop(uid, None)
        text = (update.message.text or "").strip()
        sent = 0; fail = 0
        for to_id in list(USERS):
            try:
                await context.bot.send_message(to_id, text)
                sent += 1
                await asyncio.sleep(0.03)
            except Forbidden:
                fail += 1
            except Exception:
                fail += 1
        return await update.message.reply_text(f"üì£ –ì–æ—Ç–æ–≤–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent}, –æ—à–∏–±–æ–∫ {fail}.", reply_markup=admin_main_keyboard())

# ---------- Flask + —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ----------
def start_flask_endpoints(port:int):
    app=Flask(__name__)

    @app.get("/healthz")
    def healthz(): return "ok",200

    th=Thread(target=lambda: app.run(host="0.0.0.0",port=port,debug=False,use_reloader=False))
    th.daemon=True; th.start(); log.info("Flask: /healthz on %s", port)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def on_start(update:Update, context:ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id; ensure_user(uid)
    sheets_log_user(uid, getattr(update.effective_user,"username",None))
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Å–¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ üíÑ", reply_markup=action_keyboard(uid, context.user_data))
    await update.message.reply_text(get_usage_text(uid))

async def on_ping(update:Update,_): await update.message.reply_text("pong")

# ---------- main ----------
def main():
    app=Application.builder().token(BOT_TOKEN).build()

    # –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –¥–∏–∞–ª–æ–≥
    profile_conv = ConversationHandler(
        entry_points=[
            CommandHandler("profile", profile_start_cmd),
            CallbackQueryHandler(profile_start_cb, pattern=r"^profile$")
        ],
        states={
            P_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            P_SKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_skin)],
            P_HAIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_hair)],
            P_GOALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_goals)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
        name="profile_conv",
        persistent=False,
    )
    app.add_handler(profile_conv)

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("ping", on_ping))

    # –§–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_callback))

    # –¢–µ–∫—Å—Ç (—Ä–∞—Å—Å—ã–ª–∫–∞ –∏ –ø—Ä–æ—á.)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    start_flask_endpoints(PORT)
    sheets_init()
    try: REF.reload_all()
    except Exception as e: log.warning("RefData init failed: %s", e)

    app.run_polling()

if __name__=="__main__":
    main()
