import os
import io
import re
import time
import json
import base64
import logging
from datetime import datetime
from threading import Thread
from typing import Dict, Any

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest, Forbidden
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, ConversationHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PORT = int(os.getenv("PORT", "8080"))
RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))
DEFAULT_FREE_LIMIT = int(os.getenv("FREE_LIMIT", "5"))     # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏–º–∏—Ç/–º–µ—Å.
DEFAULT_PRICE_RUB = int(os.getenv("PRICE_RUB", "299"))     # —Ü–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º–∞

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY")

# ---------- –§–ê–ô–õ–´ –î–ê–ù–ù–´–• (–ø—Ä–æ—Å—Ç–∞—è JSON-–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å) ----------
DATA_DIR = "./data"
os.makedirs(DATA_DIR, exist_ok=True)
ADMINS_FILE = os.path.join(DATA_DIR, "admins.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
USAGE_FILE = os.path.join(DATA_DIR, "usage.json")
CONFIG_FILE = os.path.join(DATA_DIR, "config.json")
FEEDBACK_FILE = os.path.join(DATA_DIR, "feedback.json")

def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: str, data):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning("Can't save %s: %s", path, e)

# seed –∞–¥–º–∏–Ω–æ–≤ –∏–∑ ENV (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
seed_admins = set()
if os.getenv("ADMIN_IDS"):
    try:
        seed_admins = set(int(x.strip()) for x in os.getenv("ADMIN_IDS").split(",") if x.strip().isdigit())
    except Exception:
        pass

ADMINS: set[int] = set(load_json(ADMINS_FILE, list(seed_admins)))
if not ADMINS and seed_admins:
    ADMINS = set(seed_admins)
save_json(ADMINS_FILE, list(ADMINS))

USERS: set[int] = set(load_json(USERS_FILE, []))
USAGE: Dict[int, Dict[str, Any]] = {int(k): v for k, v in load_json(USAGE_FILE, {}).items()}
CONFIG: Dict[str, Any] = load_json(CONFIG_FILE, {"FREE_LIMIT": DEFAULT_FREE_LIMIT, "PRICE_RUB": DEFAULT_PRICE_RUB})
FEEDBACK: Dict[str, int] = load_json(FEEDBACK_FILE, {"up": 0, "down": 0})

def persist_all():
    save_json(ADMINS_FILE, list(ADMINS))
    save_json(USERS_FILE, list(USERS))
    save_json(USAGE_FILE, USAGE)
    save_json(CONFIG_FILE, CONFIG)
    save_json(FEEDBACK_FILE, FEEDBACK)

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –ü–ê–ú–Ø–¢–¨ ----------
LAST_ANALYSIS_AT: Dict[int, float] = {}

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def ensure_user(user_id: int):
    if user_id not in USERS:
        USERS.add(user_id)
        persist_all()

def usage_entry(user_id: int) -> Dict[str, Any]:
    now = datetime.utcnow()
    m = now.month
    u = USAGE.setdefault(user_id, {"count": 0, "month": m, "premium": False})
    # –Ω–æ–≤—ã–π –º–µ—Å—è—Ü ‚Äî —Å–±—Ä–æ—Å
    if u.get("month") != m:
        u["count"] = 0
        u["month"] = m
    return u

def check_usage(user_id: int) -> bool:
    u = usage_entry(user_id)
    if u.get("premium"):
        return True
    limit = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    if u["count"] < limit:
        u["count"] += 1
        persist_all()
        return True
    return False

def get_usage_text(user_id: int) -> str:
    u = usage_entry(user_id)
    if u.get("premium"):
        return "üåü –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–µ–Ω –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤)."
    limit = int(CONFIG.get("FREE_LIMIT", DEFAULT_FREE_LIMIT))
    left = max(0, limit - u["count"])
    return f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {left} –∏–∑ {limit}."

# ---------- –ö–õ–ê–í–´ ----------
def action_keyboard(for_user_id: int) -> InlineKeyboardMarkup:
    premium = usage_entry(for_user_id).get("premium", False)
    buttons = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu")],
        [InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
         InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
    ]
    if not premium:
        buttons.append([InlineKeyboardButton("üåü –ü—Ä–µ–º–∏—É–º", callback_data="premium")])
    else:
        buttons.append([InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞ (–ø—Ä–æ–¥–ª–∏—Ç—å)", callback_data="renew")])
    if is_admin(for_user_id):
        buttons.append([InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin")])
    return InlineKeyboardMarkup(buttons)

def admin_root_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data="admin:bonus"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")],
        [InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

def admin_users_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:add_admin"),
         InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin:rem_admin")],
        [InlineKeyboardButton("üåü –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:grant_premium"),
         InlineKeyboardButton("üö´ –°–Ω—è—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:revoke_premium")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã", callback_data="admin:add_free")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –ø–æ user_id", callback_data="admin:user_info")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

def admin_settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßÆ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç FREE", callback_data="admin:set_limit")],
        [InlineKeyboardButton("üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="admin:set_price")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

def admin_bonus_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåü –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="admin:grant_premium")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã", callback_data="admin:add_free")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
    ])

# ---------- –ê–ù–ê–õ–ò–ó ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str, user_data: dict, user_id: int):
    ensure_user(user_id)
    if not check_usage(user_id):
        return await chat.send_message(
            "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
            "–û—Ñ–æ—Ä–º–∏ üåü –ü—Ä–µ–º–∏—É–º (–±–µ–∑–ª–∏–º–∏—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåü –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )

    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO()
        im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        f"–¢—ã –±—å—é—Ç–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ (—Ä–µ–∂–∏–º {mode}). –î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]

    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip()
        if not text:
            text = "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–±–æ–π."
        if len(text) > 1800:
            text = text[:1800] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ.</i>"

        try:
            await chat.send_message(
                text, parse_mode="HTML", reply_markup=action_keyboard(user_id)
            )
        except BadRequest:
            safe = re.sub(r"<[^>]+>", "", text)
            await chat.send_message(safe, reply_markup=action_keyboard(user_id))

        await chat.send_message(get_usage_text(user_id))
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

# ---------- –ö–û–õ–ë–≠–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ----------
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ensure_user(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot üíá‚Äç‚ôÄÔ∏èü§ñ\n"
        "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –∞ —è –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –•–æ—á–µ—à—å –±–µ–∑–ª–∏–º–∏—Ç? –ñ–º–∏ üåü –ü—Ä–µ–º–∏—É–º.",
        reply_markup=action_keyboard(user_id)
    )
    await update.message.reply_text(get_usage_text(user_id))

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    ensure_user(user_id)
    now = time.time()
    last = LAST_ANALYSIS_AT.get(user_id, 0)
    if now - last < RATE_LIMIT_SECONDS:
        return await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚è≥")
    LAST_ANALYSIS_AT[user_id] = now

    file = await update.message.photo[-1].get_file()
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    await _process_image_bytes(update.effective_chat, buf.getvalue(), "both", context.user_data, user_id)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = (q.data or "").strip()
    user_id = update.effective_user.id
    ensure_user(user_id)

    # –∏–Ω—Ñ–æ/–ª–∏–º–∏—Ç—ã/–ø—Ä–µ–º–∏—É–º/—Ñ–∏–¥–±–µ–∫
    if data == "limits":
        await q.answer()
        return await q.message.reply_text(get_usage_text(user_id))

    if data == "premium":
        await q.answer()
        price = int(CONFIG.get("PRICE_RUB", DEFAULT_PRICE_RUB))
        return await q.message.reply_text(
            f"üåü <b>–ü—Ä–µ–º–∏—É–º</b>\n\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (—Å–∫–æ—Ä–æ)\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Å–∫–æ—Ä–æ)\n\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ / –º–µ—Å—è—Ü",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy")],
                [InlineKeyboardButton("‚ÑπÔ∏è –õ–∏–º–∏—Ç—ã", callback_data="limits")]
            ])
        )
    if data == "buy":
        u = usage_entry(user_id)
        u["premium"] = True
        persist_all()
        await q.answer()
        return await q.message.reply_text(
            "‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç.",
            reply_markup=action_keyboard(user_id)
        )
    if data == "renew":
        u = usage_entry(user_id)
        u["premium"] = True
        persist_all()
        await q.answer("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω")
        return await q.message.edit_text("–ü—Ä–µ–º–∏—É–º –ø—Ä–æ–¥–ª—ë–Ω ‚úÖ", reply_markup=action_keyboard(user_id))

    if data == "fb:up":
        FEEDBACK["up"] = FEEDBACK.get("up", 0) + 1
        persist_all()
        return await q.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=False)
    if data == "fb:down":
        FEEDBACK["down"] = FEEDBACK.get("down", 0) + 1
        persist_all()
        return await q.answer("–ü—Ä–∏–Ω—è—Ç–æ üëç", show_alert=False)

    # –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if data == "admin":
        if not is_admin(user_id):
            return await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        return await q.message.reply_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_root_kb())

    if data.startswith("admin:"):
        if not is_admin(user_id):
            return await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        await q.answer()
        cmd = data.split(":", 1)[1]
        if cmd == "users":
            return await q.message.reply_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", reply_markup=admin_users_kb())
        if cmd == "stats":
            total_users = len(USERS)
            premium_users = sum(1 for u in USAGE.values() if u.get("premium"))
            this_month = datetime.utcnow().month
            total_analyses = sum(usage_entry(uid)["count"] for uid in USERS if usage_entry(uid)["month"] == this_month)
            fb_up = FEEDBACK.get("up", 0)
            fb_down = FEEDBACK.get("down", 0)
            txt = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ –ü—Ä–µ–º–∏—É–º: {premium_users}\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ (—ç—Ç–æ—Ç –º–µ—Å—è—Ü): {total_analyses}\n"
                f"‚Ä¢ –§–∏–¥–±–µ–∫ üëç/üëé: {fb_up}/{fb_down}\n"
                f"‚Ä¢ –õ–∏–º–∏—Ç FREE: {CONFIG.get('FREE_LIMIT')} / –¶–µ–Ω–∞: {CONFIG.get('PRICE_RUB')} ‚ÇΩ"
            )
            return await q.message.reply_text(txt, reply_markup=admin_root_kb())
        if cmd == "bonus":
            return await q.message.reply_text("üéÅ –ë–æ–Ω—É—Å—ã/–ü–æ–¥–∞—Ä–∫–∏", reply_markup=admin_bonus_kb())
        if cmd == "settings":
            return await q.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=admin_settings_kb())
        if cmd == "broadcast":
            ADMIN_STATE[user_id] = {"mode": "broadcast"}
            return await q.message.reply_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–æ—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        if cmd in ("add_admin", "rem_admin", "grant_premium", "revoke_premium", "add_free", "user_info"):
            ADMIN_STATE[user_id] = {"mode": cmd}
            prompts = {
                "add_admin": "–û—Ç–ø—Ä–∞–≤—å user_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
                "rem_admin": "–û—Ç–ø—Ä–∞–≤—å user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
                "grant_premium": "–û—Ç–ø—Ä–∞–≤—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–¥–∞—Ç—å –ü—Ä–µ–º–∏—É–º (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
                "revoke_premium": "–û—Ç–ø—Ä–∞–≤—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–Ω—è—Ç—å –ü—Ä–µ–º–∏—É–º (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
                "add_free": "–û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: user_id –ø—Ä–æ–±–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–æ–±–∞–≤–∏—Ç—å (–ø—Ä–∏–º–µ—Ä: 123456789 3).",
                "user_info": "–û—Ç–ø—Ä–∞–≤—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
            }
            return await q.message.reply_text(prompts[cmd], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:users")]]))

        if cmd == "set_limit":
            ADMIN_STATE[user_id] = {"mode": "set_limit"}
            return await q.message.reply_text(f"–¢–µ–∫—É—â–∏–π FREE_LIMIT={CONFIG.get('FREE_LIMIT')}. –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]]))
        if cmd == "set_price":
            ADMIN_STATE[user_id] = {"mode": "set_price"}
            return await q.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞={CONFIG.get('PRICE_RUB')} ‚ÇΩ. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ).", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:settings")]]))

# ---------- –°–û–°–¢–û–Ø–ù–ò–ï –ê–î–ú–ò–ù-–†–ï–ñ–ò–ú–û–í ----------
ADMIN_STATE: Dict[int, Dict[str, Any]] = {}

def extract_user_id_from_message(update: Update) -> int | None:
    # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –±–µ—Ä—ë–º –∞–≤—Ç–æ—Ä–∞
    if update.message and update.message.reply_to_message and update.message.reply_to_message.from_user:
        return update.message.reply_to_message.from_user.id
    # –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –±–µ—Ä—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
    if update.message and update.message.forward_from:
        return update.message.forward_from.id
    # –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if update.message and update.message.text:
        parts = update.message.text.strip().split()
        if parts and parts[0].isdigit():
            return int(parts[0])
    return None

async def on_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if not is_admin(admin_id):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    st = ADMIN_STATE.get(admin_id)
    if not st:
        return  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

    mode = st.get("mode")

    # –†–∞—Å—Å—ã–ª–∫–∞
    if mode == "broadcast":
        text = update.message.text or ""
        sent = 0
        failed = 0
        for uid in list(USERS):
            try:
                await context.bot.send_message(uid, f"üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
                sent += 1
            except Forbidden:
                failed += 1
            except Exception:
                failed += 1
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}.", reply_markup=admin_root_kb())

    # –ù–∞–∑–Ω–∞—á–∏—Ç—å/—Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞
    if mode in ("add_admin", "rem_admin", "grant_premium", "revoke_premium", "user_info"):
        target_id = extract_user_id_from_message(update)
        if not target_id:
            return await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å user_id. –ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —á–∏—Å–ª–æ–º.")
        ensure_user(target_id)

        if mode == "add_admin":
            ADMINS.add(target_id)
            persist_all()
            return await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=admin_users_kb())
        if mode == "rem_admin":
            if target_id in ADMINS:
                ADMINS.remove(target_id)
                persist_all()
                return await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–æ–≤.", reply_markup=admin_users_kb())
            return await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω.", reply_markup=admin_users_kb())
        if mode == "grant_premium":
            u = usage_entry(target_id)
            u["premium"] = True
            persist_all()
            return await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–ª –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.", reply_markup=admin_users_kb())
        if mode == "revoke_premium":
            u = usage_entry(target_id)
            u["premium"] = False
            persist_all()
            return await update.message.reply_text(f"‚úÖ –°–Ω—è–ª –ü—Ä–µ–º–∏—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.", reply_markup=admin_users_kb())
        if mode == "user_info":
            u = usage_entry(target_id)
            txt = (
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {target_id}\n"
                f"‚Ä¢ –ü—Ä–µ–º–∏—É–º: {'–¥–∞' if u.get('premium') else '–Ω–µ—Ç'}\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {u.get('count', 0)} / –ª–∏–º–∏—Ç {CONFIG.get('FREE_LIMIT')}\n"
                f"‚Ä¢ –ú–µ—Å—è—Ü –∑–∞–ø–∏—Å–∏: {u.get('month')}\n"
                f"‚Ä¢ –ò–∑–≤–µ—Å—Ç–µ–Ω –±–æ—Ç—É: {'–¥–∞' if target_id in USERS else '–Ω–µ—Ç'}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω: {'–¥–∞' if target_id in ADMINS else '–Ω–µ—Ç'}"
            )
            return await update.message.reply_text(txt, reply_markup=admin_users_kb())

    # –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã (—É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    if mode == "add_free":
        text = (update.message.text or "").strip()
        parts = text.split()
        if len(parts) < 2 or not parts[0].isdigit() or not parts[1].isdigit():
            return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: user_id –ø—Ä–æ–±–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä: 123456 3)")
        target_id = int(parts[0])
        add_n = int(parts[1])
        ensure_user(target_id)
        u = usage_entry(target_id)
        # –¥–æ–±–∞–≤–ª—è–µ–º ¬´–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤¬ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
        u["count"] = max(0, u.get("count", 0) - add_n)
        persist_all()
        return await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–∏–ª {add_n} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}. –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {u['count']}.", reply_markup=admin_users_kb())

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞/—Ü–µ–Ω—ã
    if mode == "set_limit":
        txt = (update.message.text or "").strip()
        if not txt.isdigit():
            return await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        CONFIG["FREE_LIMIT"] = int(txt)
        persist_all()
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"‚úÖ FREE_LIMIT –æ–±–Ω–æ–≤–ª—ë–Ω: {CONFIG['FREE_LIMIT']}", reply_markup=admin_settings_kb())

    if mode == "set_price":
        txt = (update.message.text or "").strip()
        if not txt.isdigit():
            return await update.message.reply_text("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–¶–µ–Ω–∞ –≤ ‚ÇΩ).")
        CONFIG["PRICE_RUB"] = int(txt)
        persist_all()
        ADMIN_STATE.pop(admin_id, None)
        return await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {CONFIG['PRICE_RUB']} ‚ÇΩ", reply_markup=admin_settings_kb())

# ---------- HEALTHZ ----------
def start_flask_healthz(port: int):
    app = Flask(__name__)
    @app.get("/healthz")
    def healthz(): return "ok", 200
    th = Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    th.daemon = True
    th.start()

# ---------- MAIN ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))

    # –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞ ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_admin_text))

    start_flask_healthz(PORT)
    app.run_polling()

if __name__ == "__main__":
    main()
