import os
import io
import base64
import logging
from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")          # –¥–ª—è Render: https://<app>.onrender.com/webhook
PORT        = int(os.getenv("PORT", "8080"))    # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π, –Ω–æ –∑–∞–ø–∞—Å–Ω–æ–π –¥–µ—Ñ–æ–ª—Ç –µ—Å—Ç—å

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env/Environment")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY –≤ .env/Environment")

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –†–ï–ñ–ò–ú–´ ----------
MODES = {"face": "–õ–∏—Ü–æ", "hair": "–í–æ–ª–æ—Å—ã", "both": "–õ–∏—Ü–æ+–í–æ–ª–æ—Å—ã"}

def get_mode(user_data: dict) -> str:
    return user_data.get("mode", "both")

def set_mode(user_data: dict, mode: str) -> None:
    if mode in MODES:
        user_data["mode"] = mode

def mode_keyboard(active: str) -> InlineKeyboardMarkup:
    def label(key):
        title = MODES[key]
        return f"‚úÖ {title}" if key == active else title
    kb = [
        [InlineKeyboardButton(label("face"), callback_data="mode:face"),
         InlineKeyboardButton(label("hair"), callback_data="mode:hair")],
        [InlineKeyboardButton(label("both"), callback_data="mode:both")],
    ]
    return InlineKeyboardMarkup(kb)

# ---------- –ü–†–û–ú–ü–¢ (–∫—Ä–∞—Å–∏–≤—ã–π HTML-–æ—Ç–≤–µ—Ç) ----------
def build_prompt(mode: str) -> str:
    common = (
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –†–£–°–°–ö–û–ú. –¢—ã ‚Äî –±–µ—Ä–µ–∂–Ω—ã–π –±—å—é—Ç–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –ù–ï–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, "
        "–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –ª–µ—á–µ–Ω–∏—è. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –ø—É–Ω–∫—Ç–∞–º–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
        "–í –∫–æ–Ω—Ü–µ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –æ–¥–∏–Ω –æ–±—â–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
    )
    if mode == "face":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –õ–ò–¶–û. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –±–ª–æ–∫–∞–º:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b> (–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è)\n"
            "üß¥ <b>–¢–∏–ø –∫–æ–∂–∏</b> (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)\n"
            "üåû <b>–£—Ç—Ä–æ</b>: 1‚Äì3 —à–∞–≥–∞ (–æ—á–∏—â–µ–Ω–∏–µ ‚Üí —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ ‚Üí SPF)\n"
            "üåô <b>–í–µ—á–µ—Ä</b>: 1‚Äì3 —à–∞–≥–∞ (–æ—á–∏—â–µ–Ω–∏–µ ‚Üí —Å—ã–≤–æ—Ä–æ—Ç–∫–∞/—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ)\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b> (–∫—Ä–∞—Ç–∫–æ)\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>: –∫–æ—Ä–æ—Ç–∫–æ, 1 —Å—Ç—Ä–æ–∫–∞."
        )
    elif mode == "hair":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –í–û–õ–û–°–´. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –±–ª–æ–∫–∞–º:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n"
            "üíá <b>–¢–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ</b> (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)\n"
            "üßº <b>–ú—ã—Ç—å—ë –∏ —É—Ö–æ–¥</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–£–∫–ª–∞–¥–∫–∞ –∏ —Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>: –∫–æ—Ä–æ—Ç–∫–æ, 1 —Å—Ç—Ä–æ–∫–∞."
        )
    else:
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –õ–ò–¶–û –ò –í–û–õ–û–°–´. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –±–ª–æ–∫–∞–º:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n"
            "üß¥ <b>–ö–æ–∂–∞</b>: —Ç–∏–ø/–∑–∞–º–µ—Ç–∫–∏ (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)\n"
            "üíá <b>–í–æ–ª–æ—Å—ã</b>: —Ç–∏–ø/–∑–∞–º–µ—Ç–∫–∏ (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)\n"
            "üåû <b>–£—Ç—Ä–æ (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üåô <b>–í–µ—á–µ—Ä (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–í–æ–ª–æ—Å—ã: —É—Ö–æ–¥/—É–∫–ª–∞–¥–∫–∞/—Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>: –∫–æ—Ä–æ—Ç–∫–æ, 1 —Å—Ç—Ä–æ–∫–∞."
        )
    # –ü—Ä–æ—Å–∏–º —Ñ–æ—Ä–º–∞—Ç HTML
    return f"{common}\n\n–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ HTML (—Ç–µ–≥–∏ <b>, <i>, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ <ul>/<ol>.\n\n{specific}"

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str):
    """JPEG + base64 inline_data + –≤—ã–∑–æ–≤ Gemini + HTML-–æ—Ç–≤–µ—Ç."""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPEG
    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO()
        im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è). –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        )

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        build_prompt(mode),
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]

    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip()
        if not text:
            text = "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–±–æ–π."

        # –û–±—Ä–µ–∑–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞ ~4096)
        max_len = 1800
        if len(text) > max_len:
            text = text[:max_len] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.</i>"

        await chat.send_message(text, parse_mode="HTML")
        log.info("Gemini OK")
    except Exception as e:
        log.exception("Gemini generate_content error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

def _hello_text() -> str:
    return (
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot (Gemini).\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ –§–æ—Ç–æ, –Ω–µ –∫–∞–∫ –§–∞–π–ª)."
    )

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    set_mode(context.user_data, get_mode(context.user_data))  # ensure default
    current = get_mode(context.user_data)
    await update.message.reply_text(_hello_text(), reply_markup=mode_keyboard(current))

async def on_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    current = get_mode(context.user_data)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[current]}\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:",
        reply_markup=mode_keyboard(current),
    )

async def on_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if data.startswith("mode:"):
        mode = data.split(":", 1)[1]
        set_mode(context.user_data, mode)
        await q.edit_message_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MODES[mode]}\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.",
            reply_markup=mode_keyboard(mode)
        )

async def on_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n"
        "1) –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –ª–∏—Ü–æ/–≤–æ–ª–æ—Å—ã/–æ–±–∞ (/mode).\n"
        "2) –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–∞–∫ <i>—Ñ–æ—Ç–æ</i> (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª).\n"
        "3) –ü–æ–ª—É—á–∏—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É.\n\n"
        "<b>–ü–æ–¥—Å–∫–∞–∑–∫–∏</b>\n"
        "‚Ä¢ –õ—É—á—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ ‚Äî –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç —Å–ø–µ—Ä–µ–¥–∏.\n"
        "‚Ä¢ –§–æ—Ç–æ –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É–ª—É—á—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å.\n"
        "‚Ä¢ –≠—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è."
    )
    await update.message.reply_text(msg, parse_mode="HTML")

async def on_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = (
        "<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n"
        "‚Ä¢ –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–æ—Ç–æ–º.\n"
        "‚Ä¢ –ú—ã –Ω–µ –¥–µ–ª–∏–º—Å—è –¥–∞–Ω–Ω—ã–º–∏ —Å —Ç—Ä–µ—Ç—å–∏–º–∏ –ª–∏—Ü–∞–º–∏.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç ‚Äî –æ–±—â–∏–π —É—Ö–æ–¥, –Ω–µ –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á–∞."
    )
    await update.message.reply_text(msg, parse_mode="HTML")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–Ø –∂–¥—É —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–º–µ–Ω—è–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞: /mode")

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        buf = io.BytesIO()
        await file.download_to_memory(out=buf)
        await _process_image_bytes(update.effective_chat, buf.getvalue(), get_mode(context.user_data))
    except Exception:
        log.exception("on_photo error")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    doc = update.message.document
    mime = (doc.mime_type or "")
    if not mime.startswith("image/"):
        return await update.message.reply_text("–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ).")
    try:
        file = await doc.get_file()
        buf = io.BytesIO()
        await file.download_to_memory(out=buf)
        await _process_image_bytes(update.effective_chat, buf.getvalue(), get_mode(context.user_data))
    except Exception:
        log.exception("on_document error")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Dispatcher error: %s", context.error)

# ---------- –ó–ê–ü–£–°–ö ----------
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("mode", on_mode_command))
    app.add_handler(CommandHandler("help", on_help))
    app.add_handler(CommandHandler("privacy", on_privacy))
    app.add_handler(CallbackQueryHandler(on_mode_callback, pattern=r"^mode:"))

    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.Document.IMAGE, on_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(on_error)

    if WEBHOOK_URL:
        log.info("Starting webhook: %s on port %s", WEBHOOK_URL, PORT)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL
        )
    else:
        log.info("Starting long-polling (no WEBHOOK_URL set)")
        app.run_polling()

if __name__ == "__main__":
    main()