import os
import io
import re
import time
import base64
import logging
from threading import Thread
from typing import Dict, Any

from dotenv import load_dotenv
from PIL import Image
import google.generativeai as genai

from flask import Flask  # –¥–ª—è /healthz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, ChatMemberHandler, ConversationHandler,
    filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("beauty-nano-bot")

# ---------- –ö–û–ù–§–ò–ì ----------
load_dotenv()
BOT_TOKEN      = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
PORT           = int(os.getenv("PORT", "8080"))   # Render –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π
RATE_LIMIT_SECONDS = int(os.getenv("RATE_LIMIT_SECONDS", "10"))

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env/Environment")
if not GEMINI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω GEMINI_API_KEY –≤ .env/Environment")

# ---------- GEMINI ----------
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# ---------- –†–ï–ñ–ò–ú–´ / –ö–õ–ê–í–´ / RATE-LIMIT ----------
MODES = {"face": "–õ–∏—Ü–æ", "hair": "–í–æ–ª–æ—Å—ã", "both": "–õ–∏—Ü–æ+–í–æ–ª–æ—Å—ã"}
LAST_ANALYSIS_AT: Dict[int, float] = {}  # {user_id: timestamp}

# ---------- –ü–†–û–§–ò–õ–¨ ----------
# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
P_AGE, P_SKIN, P_HAIR, P_GOALS, P_DONE = range(5)

def get_profile(user_data: dict) -> Dict[str, Any]:
    return user_data.setdefault("profile", {})

def profile_to_text(pr: Dict[str, Any]) -> str:
    if not pr:
        return "–ü—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ù–∞–∂–º–∏ ¬´üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å¬ª –∏–ª–∏ /profile, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å."
    parts = []
    if pr.get("age"): parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {pr['age']}")
    if pr.get("skin"): parts.append(f"–ö–æ–∂–∞: {pr['skin']}")
    if pr.get("hair"): parts.append(f"–í–æ–ª–æ—Å—ã: {pr['hair']}")
    if pr.get("goals"): parts.append(f"–¶–µ–ª–∏: {pr['goals']}")
    return ";\n".join(parts)

def get_mode(user_data: dict) -> str:
    return user_data.get("mode", "both")

def set_mode(user_data: dict, mode: str) -> None:
    if mode in MODES:
        user_data["mode"] = mode

def mode_keyboard(active: str) -> InlineKeyboardMarkup:
    def label(key):
        title = MODES[key]
        return f"‚úÖ {title}" if key == active else title
    kb = [
        [InlineKeyboardButton(label("face"), callback_data="mode:face"),
         InlineKeyboardButton(label("hair"), callback_data="mode:hair")],
        [InlineKeyboardButton(label("both"), callback_data="mode:both")],
    ]
    return InlineKeyboardMarkup(kb)

def action_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="home")],
            [InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode_menu")],
            [InlineKeyboardButton("üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data="fb:up"),
             InlineKeyboardButton("üëé –ù–µ –æ—á–µ–Ω—å", callback_data="fb:down")],
        ]
    )

def _hello_text() -> str:
    return (
        "–ü—Ä–∏–≤–µ—Ç! –Ø Beauty Nano Bot (Gemini).\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ –§–æ—Ç–æ, –Ω–µ –∫–∞–∫ –§–∞–π–ª)."
    )

async def send_home(chat, user_data):
    set_mode(user_data, get_mode(user_data))
    current = get_mode(user_data)
    await chat.send_message(_hello_text(), reply_markup=mode_keyboard(current))

# ---------- –ü–†–û–ú–ü–¢ (HTML) —Å —É—á—ë—Ç–æ–º –ü–†–û–§–ò–õ–Ø ----------
def build_prompt(mode: str, profile: Dict[str, Any]) -> str:
    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prof_lines = []
    if profile.get("age"): prof_lines.append(f"–≤–æ–∑—Ä–∞—Å—Ç: {profile['age']}")
    if profile.get("skin"): prof_lines.append(f"–∫–æ–∂–∞: {profile['skin']}")
    if profile.get("hair"): prof_lines.append(f"–≤–æ–ª–æ—Å—ã: {profile['hair']}")
    if profile.get("goals"): prof_lines.append(f"—Ü–µ–ª–∏: {profile['goals']}")
    prof_text = "; ".join(prof_lines)
    profile_hint = (
        f"–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({prof_text}). "
        "–ï—Å–ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º ‚Äî –æ—Ç–º–µ—Ç—å —ç—Ç–æ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ."
        if prof_text else
        "–ï—Å–ª–∏ —Å–º–æ–∂–µ—à—å ‚Äî —É—Ç–æ—á–Ω—è–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑—Ä–∞—Å—Ç, —Ç–∏–ø –∫–æ–∂–∏/–≤–æ–ª–æ—Å, —Ü–µ–ª–∏)."
    )

    common = (
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –†–£–°–°–ö–û–ú. –¢—ã ‚Äî –±–µ—Ä–µ–∂–Ω—ã–π –±—å—é—Ç–∏-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –ù–ï–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, "
        "–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –ª–µ—á–µ–Ω–∏—è. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ, –ø—É–Ω–∫—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö. "
        "–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –æ–¥–∏–Ω –æ–±—â–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
    )
    if mode == "face":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –õ–ò–¶–û. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üß¥ <b>–¢–∏–ø –∫–æ–∂–∏</b>\n"
            "üåû <b>–£—Ç—Ä–æ</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üåô <b>–í–µ—á–µ—Ä</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    elif mode == "hair":
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û –í–û–õ–û–°–´. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üíá <b>–¢–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ</b>\n"
            "üßº <b>–ú—ã—Ç—å—ë –∏ —É—Ö–æ–¥</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–£–∫–ª–∞–¥–∫–∞ –∏ —Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    else:
        specific = (
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –õ–ò–¶–û –ò –í–û–õ–û–°–´. –ë–ª–æ–∫–∏:\n"
            "‚≠ê <b>–ß—Ç–æ –≤–∏–¥–Ω–æ</b>\n"
            "üß¥ <b>–ö–æ–∂–∞</b>\n"
            "üíá <b>–í–æ–ª–æ—Å—ã</b>\n"
            "üåû <b>–£—Ç—Ä–æ (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üåô <b>–í–µ—á–µ—Ä (–∫–æ–∂–∞)</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "üí® <b>–í–æ–ª–æ—Å—ã: —É—Ö–æ–¥/—É–∫–ª–∞–¥–∫–∞/—Ç–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞</b>: 1‚Äì3 —à–∞–≥–∞\n"
            "‚õî <b>–ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å</b>\n"
            "‚ÑπÔ∏è <i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä</i>"
        )
    return (
        f"{common}\n{profile_hint}\n\n"
        "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ HTML (—Ç–µ–≥–∏ <b>, <i>, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫).\n\n"
        f"{specific}"
    )

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ----------
async def _process_image_bytes(chat, img_bytes: bytes, mode: str, user_data: dict):
    try:
        im = Image.open(io.BytesIO(img_bytes)).convert("RGB")
        im.thumbnail((1024, 1024))
        buf = io.BytesIO()
        im.save(buf, format="JPEG", quality=85)
        jpeg_bytes = buf.getvalue()
    except Exception:
        log.exception("PIL convert error")
        return await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")

    b64 = base64.b64encode(jpeg_bytes).decode("utf-8")
    payload = [
        build_prompt(mode, get_profile(user_data)),
        {"inline_data": {"mime_type": "image/jpeg", "data": b64}}
    ]

    try:
        response = model.generate_content(payload)
        text = (getattr(response, "text", "") or "").strip()
        if not text:
            text = "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–±–æ–π."
        if len(text) > 1800:
            text = text[:1800] + "\n\n<i>–°–æ–∫—Ä–∞—â–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.</i>"

        # --- –ù–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ HTML, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî plain text ---
        try:
            await chat.send_message(
                text,
                parse_mode="HTML",
                reply_markup=action_keyboard(),
                disable_web_page_preview=True,
            )
        except BadRequest as e:
            log.warning("HTML parse failed (%s). Fallback to plain text.", e)
            safe = re.sub(r"(?i)<\s*br\s*/?>", "\n", text)  # <br> -> \n
            safe = re.sub(r"(?i)</?(p|div|ul|ol|li|h[1-6])[^>]*>", "\n", safe)
            safe = re.sub(r"<[^>]+>", "", safe)             # —Å–Ω—è—Ç—å –ø—Ä–æ—á–∏–µ —Ç–µ–≥–∏
            safe = re.sub(r"\n{3,}", "\n\n", safe).strip()
            if not safe:
                safe = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.\n\n" + text
            await chat.send_message(
                safe,
                reply_markup=action_keyboard(),
                disable_web_page_preview=True,
            )
    except Exception as e:
        log.exception("Gemini error")
        await chat.send_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# ---------- –ö–û–ú–ê–ù–î–´ / CALLBACK-–∏ / FALLBACK –¢–ï–ö–°–¢–ê ----------
async def on_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["welcomed"] = True
    await send_home(update.effective_chat, context.user_data)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("welcomed"):
        context.user_data["welcomed"] = True
        return await send_home(update.effective_chat, context.user_data)
    current = get_mode(context.user_data)
    await update.message.reply_text(
        "–Ø –∂–¥—É —Ñ–æ—Ç–æ üôÇ\n–ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º: /mode –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π üßë‚Äçüíº –ü—Ä–æ—Ñ–∏–ª—å",
        reply_markup=mode_keyboard(current)
    )

async def on_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    current = get_mode(context.user_data)
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[current]}\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:",
        reply_markup=mode_keyboard(current),
    )

async def on_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n"
        "1) –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –ª–∏—Ü–æ/–≤–æ–ª–æ—Å—ã/–æ–±–∞ (/mode).\n"
        "2) –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–∞–∫ <i>—Ñ–æ—Ç–æ</i>.\n"
        "3) –ü–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "‚ÑπÔ∏è –≠—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.\n"
        "–î–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /profile.",
        parse_mode="HTML"
    )

async def on_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n"
        "‚Ä¢ –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏.\n"
        "‚Ä¢ –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è.\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç ‚Äî –æ–±—â–∏–π —É—Ö–æ–¥, –Ω–µ –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á–∞.",
        parse_mode="HTML"
    )

# ---------- –ü–†–û–§–ò–õ–¨: ConversationHandler ----------
async def profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å ‚ú®\n\n"
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25)\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    return P_AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = (update.message.text or "").strip()
    if not text.isdigit() or not (5 <= int(text) <= 100):
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 5 –¥–æ 100.")
    get_profile(context.user_data)["age"] = int(text)
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Ç–∏–ø –∫–æ–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è/–∂–∏—Ä–Ω–∞—è/—Å—É—Ö–∞—è/–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è/–Ω–µ—Ç):"
    )
    return P_SKIN

async def profile_skin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_profile(context.user_data)["skin"] = (update.message.text or "").strip()[:100]
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ. –ö–∞–∫–æ–π —Ç–∏–ø/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–Ω–∫–∏–µ, –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ, —Å–∫–ª–æ–Ω–Ω—ã –∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞ –≥–æ–ª–æ–≤—ã)"
    )
    return P_HAIR

async def profile_hair(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_profile(context.user_data)["hair"] = (update.message.text or "").strip()[:120]
    await update.message.reply_text(
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ–Ω—å—à–µ –±–ª–µ—Å–∫–∞, –æ–±—ä—ë–º, –º—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ, –±–µ–∑ —Å—É–ª—å—Ñ–∞—Ç–æ–≤)"
    )
    return P_GOALS

async def profile_goals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    get_profile(context.user_data)["goals"] = (update.message.text or "").strip()[:160]
    txt = profile_to_text(get_profile(context.user_data))
    await update.message.reply_text(
        f"–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n{txt}\n\n"
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî —É—á—Ç—É —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.",
    )
    return ConversationHandler.END

async def profile_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ: /profile")
    return ConversationHandler.END

async def myprofile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + profile_to_text(get_profile(context.user_data)))

# ---------- CALLBACK-–∏ ----------
async def on_mode_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    data = (q.data or "").strip()

    # –§–∏–¥–±–µ–∫
    if data in ("fb:up", "fb:down"):
        await q.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!" if data == "fb:up" else "–ü—Ä–∏–Ω—è—Ç–æ üëç", show_alert=False)
        log.info("Feedback from %s: %s", update.effective_user.id, data)
        return

    # –î–æ–º–æ–π
    if data == "home":
        await q.answer()
        return await send_home(update.effective_chat, context.user_data)

    # –ú–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤
    if data == "mode_menu":
        await q.answer()
        current = get_mode(context.user_data)
        return await q.edit_message_text(
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[current]}\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π:",
            reply_markup=mode_keyboard(current)
        )

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    if data.startswith("mode:"):
        await q.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")
        mode = data.split(":", 1)[1]
        set_mode(context.user_data, mode)
        return await q.edit_message_text(
            f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MODES[mode]}\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.",
            reply_markup=mode_keyboard(mode)
        )

    # –ü—Ä–æ—Ñ–∏–ª—å (–∫–Ω–æ–ø–∫–∞)
    if data == "profile":
        await q.answer()
        await q.message.reply_text("–û—Ç–∫—Ä—ã–≤–∞—é –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è‚Ä¶")
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã ConversationHandler –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª
        return await profile_start(update.to_dict()["callback_query"]["message"], context)

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ----------
async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # rate limit
    user_id = update.effective_user.id
    now = time.time()
    last = LAST_ANALYSIS_AT.get(user_id, 0)
    if now - last < RATE_LIMIT_SECONDS:
        wait = int(max(1, RATE_LIMIT_SECONDS - (now - last)))
        return await update.message.reply_text(
            f"–ü–æ–¥–æ–∂–¥–∏ {wait} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º ‚è≥",
            reply_markup=mode_keyboard(get_mode(context.user_data))
        )
    LAST_ANALYSIS_AT[user_id] = now

    file = await update.message.photo[-1].get_file()
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    await _process_image_bytes(update.effective_chat, buf.getvalue(), get_mode(context.user_data), context.user_data)

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # rate limit
    user_id = update.effective_user.id
    now = time.time()
    last = LAST_ANALYSIS_AT.get(user_id, 0)
    if now - last < RATE_LIMIT_SECONDS:
        wait = int(max(1, RATE_LIMIT_SECONDS - (now - last)))
        return await update.message.reply_text(
            f"–ü–æ–¥–æ–∂–¥–∏ {wait} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º ‚è≥",
            reply_markup=mode_keyboard(get_mode(context.user_data))
        )

    doc = update.message.document
    if not (doc and doc.mime_type and doc.mime_type.startswith("image/")):
        return await update.message.reply_text("–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ.")

    LAST_ANALYSIS_AT[user_id] = now
    file = await doc.get_file()
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    await _process_image_bytes(update.effective_chat, buf.getvalue(), get_mode(context.user_data), context.user_data)

# ---------- –ê–í–¢–û–ü–†–ò–í–ï–¢ ----------
async def on_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.my_chat_member.new_chat_member.status == "member":
        context.user_data["welcomed"] = True
        await send_home(update.effective_chat, context.user_data)

# ---------- –û–®–ò–ë–ö–ò ----------
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Dispatcher error: %s", context.error)

# ---------- HEALTHZ (Flask) ----------
def start_flask_healthz(port: int):
    """/healthz ‚Äî –¥–ª—è Render Health Check (HTTP 200)."""
    app = Flask(__name__)

    @app.get("/healthz")
    def healthz():
        return "ok", 200

    th = Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    th.daemon = True
    th.start()
    log.info("Flask /healthz running on port %s", port)

# ---------- MAIN (—Ñ–æ—Ä—Å-polling) ----------
def main() -> None:
    tg_app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    tg_app.add_handler(CommandHandler("start", on_start))
    tg_app.add_handler(CommandHandler("mode", on_mode))
    tg_app.add_handler(CommandHandler("help", on_help))
    tg_app.add_handler(CommandHandler("privacy", on_privacy))
    tg_app.add_handler(CommandHandler("myprofile", myprofile))

    # –ü—Ä–æ—Ñ–∏–ª—å: –¥–∏–∞–ª–æ–≥
    profile_conv = ConversationHandler(
        entry_points=[CommandHandler("profile", profile_start)],
        states={
            P_AGE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            P_SKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_skin)],
            P_HAIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_hair)],
            P_GOALS:[MessageHandler(filters.TEXT & ~filters.COMMAND, profile_goals)],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
        name="profile_conv",
        persistent=False,
    )
    tg_app.add_handler(profile_conv)

    # –ö–Ω–æ–ø–∫–∏
    tg_app.add_handler(CallbackQueryHandler(on_mode_callback))  # –ø—Ä–∏–Ω–∏–º–∞–µ–º home/mode/fb/profile

    # –°–æ–æ–±—â–µ–Ω–∏—è
    tg_app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    tg_app.add_handler(MessageHandler(filters.Document.IMAGE, on_document))
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç –ø–æ Start
    tg_app.add_handler(ChatMemberHandler(on_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))

    tg_app.add_error_handler(on_error)

    # –í—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º healthz –∏ –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º polling
    start_flask_healthz(PORT)
    logging.warning("Force POLLING mode (WEBHOOK_URL –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)")
    tg_app.run_polling()

if __name__ == "__main__":
    main()
